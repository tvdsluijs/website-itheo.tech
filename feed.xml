<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>iTheo.Tech</title>
    <link href="https://itheo.tech/feed.xml" rel="self" />
    <link href="https://itheo.tech" />
    <updated>2024-06-01T19:42:04+02:00</updated>
    <author>
        <name>Theo van der Sluijs</name>
    </author>
    <id>https://itheo.tech</id>

    <entry>
        <title>Integrating Your Volvo V60 into Your Smart Home</title>
        <author>
            <name>Theo van der Sluijs</name>
        </author>
        <link href="https://itheo.tech/integrating-your-volvo-v60-into-your-smart-home.html"/>
        <id>https://itheo.tech/integrating-your-volvo-v60-into-your-smart-home.html</id>
        <media:content url="https://itheo.tech/media/posts/102/e6a5fc2d-7b7f-492d-8848-c21e66c52613.jpeg" medium="image" />

        <updated>2023-12-17T10:12:16+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://itheo.tech/media/posts/102/e6a5fc2d-7b7f-492d-8848-c21e66c52613.jpeg" alt="" />
                    Home automation is not just about controlling lights and thermostats anymore. It's about integrating every aspect of your life into one seamless, connected experience. And what better way to embrace this technological evolution than by integrating your car into your smart home system? In this&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://itheo.tech/media/posts/102/e6a5fc2d-7b7f-492d-8848-c21e66c52613.jpeg" class="type:primaryImage" alt="" /></p>
                <p>Home automation is not just about controlling lights and thermostats anymore. It's about integrating every aspect of your life into one seamless, connected experience. And what better way to embrace this technological evolution than by integrating your car into your smart home system? In this article, I will explore how a Volvo V60 can be incorporated into a Home Assistant-powered smart home dashboard, transforming your daily interactions with your vehicle.</p>
<h3 id="heading-the-heart-of-the-system-volvo-on-call-integration"><strong>The Heart of the System: Volvo On Call Integration</strong></h3>
<p>At the core of this integration is the Volvo On Call system. This connected car solution not only provides essential information like the car's location and fuel level but also allows for remote control of various car functions. When integrated with Home Assistant, a popular open-source home automation platform, it unlocks a new realm of possibilities.</p>
<p>Within Home Assistant there is an integration you can install for getting vital information about your Volvo. This tutorial is about the Dashboard and not so much about the integration installation. So please do this upfront.</p>
<h3 id="heading-customizing-the-lovelace-dashboard-for-your-volvo-v60"><strong>Customizing the Lovelace Dashboard for Your Volvo V60</strong></h3>
<p>Home Assistant's Lovelace user interface is a playground for customization. For my Volvo V60, I have designed a dashboard that not only provides real-time data but also adds a touch of elegance and functionality. Here's how:</p>
<ol>
<li>
<p><strong>Title Card with Style</strong>: A custom title card proudly displays the name 'Volvo V60', set against a sleek and modern backdrop.</p>
</li>
<li>
<p><strong>Interactive Car Diagram</strong>: Imagine a top-down view of your Volvo V60, with interactive icons overlaid to indicate the status of doors, tires, and more. Each element responds in real-time, changing colors to reflect their current state.</p>
</li>
<li>
<p><strong>Control at Your Fingertips</strong>: Need to start your car or activate the heater remotely? The dashboard includes custom buttons for these functions, making it easier than ever to control your car from the comfort of your home.</p>
</li>
</ol>
<h3 id="heading-data-visualization-and-monitoring"><strong>Data Visualization and Monitoring</strong></h3>
<p>The dashboard isn't just about control; it's also about keeping a close eye on your vehicle's health and status. Custom cards display valuable data like fuel consumption, average speed, and overall range. It's not just informative; it's also a visual treat.</p>
<h3 id="heading-seamless-integration-and-user-experience"><strong>Seamless Integration and User Experience</strong></h3>
<p>What makes this setup stand out is the seamless integration and the user-friendly experience it offers. Whether you're a tech enthusiast or just someone who appreciates the convenience, this dashboard is designed to cater to your needs, blending the boundaries between car and home automation.</p>
<p>Alright, let's dive into this Lovelace dashboard view for a Volvo V60, created with the Home Assistant platform. The configuration you provided indicates a highly detailed and interactive interface for monitoring and controlling various aspects of the vehicle. Here's a breakdown of the Volvo On Call integration and how it's used in this dashboard:</p>
<h3 id="heading-volvo-on-call-integration">Volvo On Call Integration</h3>
<p>Volvo On Call is a connected car solution that provides a range of services and features through a smartphone app or the Volvo car itself. In the context of Home Assistant, the Volvo On Call integration allows you to control and monitor your Volvo car. It can provide real-time data like the car's location, fuel level, odometer reading, and control functions like pre-heating, locking, and unlocking the doors.</p>
<h3 id="heading-dashboard-view-explanation">Dashboard View Explanation</h3>
<p>The dashboard view, titled "Volvo," is designed to give you a quick and comprehensive overview of the status of your Volvo V60. The layout along with the use of custom cards, icons, and styles, makes the information easily accessible and visually appealing.</p>
<h4 id="heading-title-card">Title Card</h4>
<ul>
<li><strong>Custom Mushroom Title Card</strong>: This card displays the title "Volvo V60" with a customized style for the heading.</li>
</ul>
<h4 id="heading-picture-elements-card">Picture Elements Card</h4>
<ul>
<li>
<p><strong>Car Status Visualization</strong>: This card uses an image of the Volvo V60 (<code>/local/images/volvo_topview_v1.png</code>) as a background and overlays interactive elements that represent different sensors and locks on your car.</p>
</li>
<li>
<p><strong>State Icons and Labels</strong>: Each element (like <code>binary_</code><a target="_blank" href="http://sensor.pl" rel="noopener"><code>sensor.pl</code></a><code>497n_tailgate</code>, <a target="_blank" href="http://lock.pl" rel="noopener"><code>lock.pl</code></a><code>497n_door_lock</code>, <code>binary_</code><a target="_blank" href="http://sensor.pl" rel="noopener"><code>sensor.pl</code></a><code>497n_front_right_door</code>, etc.) is represented with an icon and a label. These elements show the current status of various parts of the car like doors, tailgate, hood, and tires.</p>
</li>
<li>
<p><strong>Custom Styling</strong>: The styles applied to these elements (<code>'--paper-item-icon-color'</code> and <code>'--paper-item-icon-active-color'</code>) ensure that the icons are visually consistent and change color based on their state.</p>
</li>
</ul>
<h4 id="heading-grid-card">Grid Card</h4>
<ul>
<li><strong>Control Buttons</strong>: The grid card contains control buttons like Lock, Start, and Pre-Heat for the car, created using custom Mushroom lock and entity cards. These allow direct interaction with the car's functions.</li>
</ul>
<h4 id="heading-general-info-section">General Info Section</h4>
<ul>
<li>
<p><strong>Nested Cards</strong>: This section uses a combination of custom stack-in-card and layout-card configurations to display various information such as fuel consumption, average speed, fuel amount, and range.</p>
</li>
<li>
<p><strong>Template Cards</strong>: The custom Mushroom template cards dynamically show data from sensors and change the icon colors based on specific conditions (like low fuel).</p>
</li>
</ul>
<h4 id="heading-other-info-section">Other Info Section</h4>
<ul>
<li><strong>Entities Card</strong>: This section provides a list of sensors and binary sensors that show additional information about the car, like brake fluid level, service requirements, last trip details, etc.</li>
</ul>
<h3 id="heading-entities-and-their-functions">Entities and Their Functions</h3>
<ol>
<li>
<p><strong>binary_</strong><a target="_blank" href="http://sensor.pl" rel="noopener"><strong>sensor.pl</strong></a><strong>497n_...</strong>: These sensors represent different binary states of the car, like whether doors are open or closed, if fluids need refilling, etc.</p>
</li>
<li>
<p><a target="_blank" href="http://lock.pl" rel="noopener"><strong>lock.pl</strong></a><strong>497n_door_lock</strong>: Represents the car's lock status.</p>
</li>
<li>
<p><a target="_blank" href="http://switch.pl" rel="noopener"><strong>switch.pl</strong></a><strong>497n_engine</strong>: A switch to start or stop the engine.</p>
</li>
<li>
<p><a target="_blank" href="http://switch.pl" rel="noopener"><strong>switch.pl</strong></a><strong>497n_heater</strong>: Controls the pre-heating function.</p>
</li>
<li>
<p><a target="_blank" href="http://sensor.pl" rel="noopener"><strong>sensor.pl</strong></a><strong>497n_...</strong>: These sensors provide various data points like fuel consumption, odometer reading, trip meters, etc.</p>
</li>
</ol>
<p>The dashboard configuration effectively combines the data and control aspects of the Volvo On Call integration into a user-friendly interface, providing real-time information and control over your Volvo V60 or any other (Volvo) Car. It's a great example of how Home Automation can be tailored to specific needs, especially in case with a focus on sustainability and energy efficiency.</p>
<h3 id="heading-code">Code</h3>
<p>So here is my code of the dashboard</p>
<pre><code class="lang-yaml"><span class="hljs-comment">### Volvo On Call Dashboard View</span><restore-line-break><span class="hljs-comment">#</span><restore-line-break><span class="hljs-comment"># Author: Theo van der Sluijs</span><restore-line-break><span class="hljs-comment"># Contact: info@itheo.tech</span><restore-line-break><span class="hljs-comment">#</span><restore-line-break><span class="hljs-comment"># Description:</span><restore-line-break><span class="hljs-comment"># This Home Assistant dashboard integrates with the Volvo On Call service, providing a detailed and interactive view of a Volvo V60.</span><restore-line-break><span class="hljs-comment"># It includes various sensors and controls related to the car, displayed in an intuitive and user-friendly manner.</span><restore-line-break><restore-line-break><span class="hljs-bullet">-</span> <span class="hljs-attr">title:</span> <span class="hljs-string">Volvo</span>  <span class="hljs-comment"># Title of the dashboard tab</span><restore-line-break>  <span class="hljs-attr">path:</span> <span class="hljs-string">volvo</span>  <span class="hljs-comment"># URL path for the dashboard</span><restore-line-break>  <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car</span>  <span class="hljs-comment"># Icon for the dashboard tab</span><restore-line-break>  <span class="hljs-attr">theme:</span> <span class="hljs-string">Graphite</span>  <span class="hljs-comment"># Theme applied to this dashboard</span><restore-line-break>  <span class="hljs-attr">type:</span> <span class="hljs-string">custom:masonry-layout</span>  <span class="hljs-comment"># Layout type for arranging cards</span><restore-line-break>  <span class="hljs-attr">badges:</span> []  <span class="hljs-comment"># List of badges to display on the dashboard (empty in this case)</span><restore-line-break>  <span class="hljs-attr">cards:</span><restore-line-break>    <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">vertical-stack</span>  <span class="hljs-comment"># Organizes cards in a vertical stack</span><restore-line-break>      <span class="hljs-attr">cards:</span><restore-line-break>        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:mushroom-title-card</span>  <span class="hljs-comment"># A custom card for displaying a title</span><restore-line-break>          <span class="hljs-attr">title:</span> <span class="hljs-string">Volvo</span> <span class="hljs-string">V60</span>  <span class="hljs-comment"># Title displayed on the card</span><restore-line-break>          <span class="hljs-attr">style:</span> <span class="hljs-string">|</span>  <span class="hljs-comment"># Custom CSS styling for the title card</span><restore-line-break>            <span class="hljs-string">h1.title</span> {<restore-line-break>            <span class="hljs-attr">display:</span> <span class="hljs-string">flex;</span><restore-line-break>            <span class="hljs-attr">align-items:</span> <span class="hljs-string">center;</span><restore-line-break>            <span class="hljs-attr">text-align:</span> <span class="hljs-string">center;</span><restore-line-break>            <span class="hljs-attr">font-size:</span> <span class="hljs-number">2.</span><span class="hljs-string">8vh;</span><restore-line-break>            }<restore-line-break>            <span class="hljs-string">h1.title::before,</span><restore-line-break>            <span class="hljs-string">h1.title::after</span> {<restore-line-break>              <span class="hljs-attr">content:</span> <span class="hljs-string">''</span><span class="hljs-string">;</span><restore-line-break>              <span class="hljs-attr">flex:</span> <span class="hljs-number">1</span><span class="hljs-string">;</span><restore-line-break>              <span class="hljs-attr">border-bottom:</span> <span class="hljs-string">1px</span> <span class="hljs-string">solid</span> <span class="hljs-comment">#fff;</span><restore-line-break>            }<restore-line-break>            <span class="hljs-string">h1.title:not(:empty)::before</span> {<restore-line-break>              <span class="hljs-attr">margin-right:</span> <span class="hljs-string">1em;</span><restore-line-break>            }<restore-line-break>            <span class="hljs-string">h1.title:not(:empty)::after</span> {<restore-line-break>              <span class="hljs-attr">margin-left:</span> <span class="hljs-string">1em;</span><restore-line-break>            }<restore-line-break>            <span class="hljs-string">ha-card</span> {<restore-line-break>              <span class="hljs-attr">background:</span> <span class="hljs-string">none!important;</span><restore-line-break>              <span class="hljs-string">border:none</span><restore-line-break>              }<restore-line-break>        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">picture-elements</span>  <span class="hljs-comment"># Card that positions elements over an image</span><restore-line-break>          <span class="hljs-attr">elements:</span><restore-line-break>            <span class="hljs-comment"># Various state icons and labels for different parts of the car like tailgate, hood, doors, tires, etc.</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_tailgate</span><restore-line-break>              <span class="hljs-attr">style:</span>  <span class="hljs-comment"># Custom styles for positioning and coloring the icon</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">93</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">50</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-active-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-label</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_tailgate</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">97</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">50</span><span class="hljs-string">%</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_hood</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">4</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">50</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-active-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>            <span class="hljs-comment"># Additional state-icons and state-labels for various car components</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-label</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_hood</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">8</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">50</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">color:</span> <span class="hljs-string">white</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">lock.pl497n_door_lock</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">transform:</span> <span class="hljs-string">scale(2.2)</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">47</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">46</span><span class="hljs-string">%</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-label</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">lock.pl497n_door_lock</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">59</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">50</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">color:</span> <span class="hljs-string">black</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_front_right_door</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car-door</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">45</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-active-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>              <span class="hljs-attr">icon_color:</span> <span class="hljs-string">red</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-label</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car-tire-alert</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_front_right_door</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">50</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car-door</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_front_left_door</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">45</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">15</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-active-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-label</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_front_left_door</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">50</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">15</span><span class="hljs-string">%</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_rear_right_door</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car-door</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">60</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-active-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>              <span class="hljs-attr">icon_color:</span> <span class="hljs-string">red</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-label</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_rear_right_door</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">65</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">85</span><span class="hljs-string">%</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car-door</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_rear_left_door</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">60</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">15</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-active-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-label</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_rear_left_door</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">65</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">15</span><span class="hljs-string">%</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car-tire-alert</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_front_left_tire</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">75</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-active-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-label</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_front_left_tire</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">30</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">75</span><span class="hljs-string">%</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car-tire-alert</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_front_right_tire</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-active-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-label</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_front_right_tire</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">30</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car-tire-alert</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_rear_left_tire</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">75</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">75</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-active-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-label</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_rear_left_tire</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">80</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">75</span><span class="hljs-string">%</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car-tire-alert</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_rear_right_tire</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">75</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>                <span class="hljs-string">'--paper-item-icon-active-color'</span><span class="hljs-string">:</span> <span class="hljs-string">rgb(104,</span> <span class="hljs-number">191</span><span class="hljs-string">,</span> <span class="hljs-number">57</span><span class="hljs-string">)</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-label</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_rear_right_tire</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">80</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">25</span><span class="hljs-string">%</span><restore-line-break>          <span class="hljs-attr">image:</span> <span class="hljs-string">/local/images/volvo_topview_v1.png</span>  <span class="hljs-comment"># Image of the Volvo V60 used as the background</span><restore-line-break>       <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">grid</span>  <span class="hljs-comment"># Grid layout for organizing multiple cards</span><restore-line-break>          <span class="hljs-attr">square:</span> <span class="hljs-literal">false</span><restore-line-break>          <span class="hljs-attr">columns:</span> <span class="hljs-number">3</span>  <span class="hljs-comment"># Number of columns in the grid</span><restore-line-break>          <span class="hljs-attr">cards:</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:mushroom-lock-card</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">lock.pl497n_door_lock</span><restore-line-break>              <span class="hljs-attr">layout:</span> <span class="hljs-string">vertical</span><restore-line-break>              <span class="hljs-attr">secondary_info:</span> <span class="hljs-string">none</span><restore-line-break>              <span class="hljs-attr">primary_info:</span> <span class="hljs-string">name</span><restore-line-break>              <span class="hljs-attr">icon_type:</span> <span class="hljs-string">none</span><restore-line-break>              <span class="hljs-attr">name:</span> <span class="hljs-string">Lock</span>  <span class="hljs-comment"># Card for controlling the car lock</span><restore-line-break><restore-line-break>           <span class="hljs-comment"># Additional cards for engine start and pre-heating</span><restore-line-break><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:mushroom-entity-card</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">switch.pl497n_engine</span><restore-line-break>              <span class="hljs-attr">tap_action:</span><restore-line-break>                <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><restore-line-break>              <span class="hljs-attr">layout:</span> <span class="hljs-string">vertical</span><restore-line-break>              <span class="hljs-attr">primary_info:</span> <span class="hljs-string">name</span><restore-line-break>              <span class="hljs-attr">secondary_info:</span> <span class="hljs-string">none</span><restore-line-break>              <span class="hljs-attr">double_tap_action:</span><restore-line-break>                <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><restore-line-break>              <span class="hljs-attr">name:</span> <span class="hljs-string">Start</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:mushroom-entity-card</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">switch.pl497n_heater</span><restore-line-break>              <span class="hljs-attr">tap_action:</span><restore-line-break>                <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><restore-line-break>              <span class="hljs-attr">double_tap_action:</span><restore-line-break>                <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><restore-line-break>              <span class="hljs-attr">primary_info:</span> <span class="hljs-string">name</span><restore-line-break>              <span class="hljs-attr">secondary_info:</span> <span class="hljs-string">none</span><restore-line-break>              <span class="hljs-attr">layout:</span> <span class="hljs-string">vertical</span><restore-line-break>              <span class="hljs-attr">name:</span> <span class="hljs-string">Pre-Heat</span><restore-line-break>    <span class="hljs-comment"># Another vertical stack for more detailed information</span><restore-line-break>    <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">vertical-stack</span><restore-line-break>      <span class="hljs-attr">cards:</span><restore-line-break>        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:mushroom-title-card</span><restore-line-break>          <span class="hljs-attr">title:</span> <span class="hljs-string">Algemene</span> <span class="hljs-string">info</span>  <span class="hljs-comment"># Title for general information about the car</span><restore-line-break>          <span class="hljs-attr">style:</span> <span class="hljs-string">|</span>  <span class="hljs-comment"># Custom CSS for the title card</span><restore-line-break>            <span class="hljs-string">h1.title</span> {<restore-line-break>            <span class="hljs-attr">display:</span> <span class="hljs-string">flex;</span><restore-line-break>            <span class="hljs-attr">align-items:</span> <span class="hljs-string">center;</span><restore-line-break>            <span class="hljs-attr">text-align:</span> <span class="hljs-string">center;</span><restore-line-break>            <span class="hljs-attr">font-size:</span> <span class="hljs-number">2.</span><span class="hljs-string">8vh;</span><restore-line-break>            }<restore-line-break>            <span class="hljs-string">h1.title::before,</span><restore-line-break>            <span class="hljs-string">h1.title::after</span> {<restore-line-break>              <span class="hljs-attr">content:</span> <span class="hljs-string">''</span><span class="hljs-string">;</span><restore-line-break>              <span class="hljs-attr">flex:</span> <span class="hljs-number">1</span><span class="hljs-string">;</span><restore-line-break>              <span class="hljs-attr">border-bottom:</span> <span class="hljs-string">1px</span> <span class="hljs-string">solid</span> <span class="hljs-comment">#fff;</span><restore-line-break>            }<restore-line-break>            <span class="hljs-string">h1.title:not(:empty)::before</span> {<restore-line-break>              <span class="hljs-attr">margin-right:</span> <span class="hljs-string">1em;</span><restore-line-break>            }<restore-line-break>            <span class="hljs-string">h1.title:not(:empty)::after</span> {<restore-line-break>              <span class="hljs-attr">margin-left:</span> <span class="hljs-string">1em;</span><restore-line-break>            }<restore-line-break>            <span class="hljs-string">ha-card</span> {<restore-line-break>              <span class="hljs-attr">background:</span> <span class="hljs-string">none!important;</span><restore-line-break>              <span class="hljs-string">border:none</span><restore-line-break>              }<restore-line-break>       <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:stack-in-card</span>  <span class="hljs-comment"># Combines multiple cards into one card</span><restore-line-break>          <span class="hljs-attr">cards:</span><restore-line-break>            <span class="hljs-comment"># Nested stack-in-card and layout cards for organizing information and images</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:stack-in-card</span><restore-line-break>              <span class="hljs-attr">cards:</span><restore-line-break>                <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:layout-card</span><restore-line-break>                  <span class="hljs-attr">layout_type:</span> <span class="hljs-string">custom:grid-layout</span><restore-line-break>                  <span class="hljs-attr">layout:</span><restore-line-break>                    <span class="hljs-attr">grid-template-columns:</span> <span class="hljs-string">160px</span> <span class="hljs-string">auto</span><restore-line-break>                    <span class="hljs-attr">margin:</span> <span class="hljs-string">'-4px -4px -8px -4px'</span><restore-line-break>                  <span class="hljs-attr">cards:</span><restore-line-break>                    <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">picture</span><restore-line-break>                      <span class="hljs-attr">image:</span> <span class="hljs-string">/local/images/volvo_topview_smal.png</span><restore-line-break>                    <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:stack-in-card</span><restore-line-break>                      <span class="hljs-attr">cards:</span><restore-line-break>                        <span class="hljs-comment"># Mushroom entity cards for displaying specific car metrics like fuel consumption, average speed, etc.</span><restore-line-break>                        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:mushroom-entity-card</span><restore-line-break>                          <span class="hljs-attr">entity:</span> <span class="hljs-string">sensor.pl497n_fuel_consumption</span><restore-line-break>                          <span class="hljs-attr">icon_color:</span> <span class="hljs-string">cyan</span><restore-line-break>                          <span class="hljs-attr">tap_action:</span><restore-line-break>                            <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><restore-line-break>                          <span class="hljs-attr">hold_action:</span><restore-line-break>                            <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><restore-line-break>                          <span class="hljs-attr">primary_info:</span> <span class="hljs-string">name</span><restore-line-break>                          <span class="hljs-attr">secondary_info:</span> <span class="hljs-string">state</span><restore-line-break>                          <span class="hljs-attr">name:</span> <span class="hljs-string">Gemiddeld</span> <span class="hljs-string">verbruik</span><restore-line-break>                          <span class="hljs-attr">card_mod:</span><restore-line-break>                            <span class="hljs-attr">style:</span> <span class="hljs-string">|<restore-line-break>                              ha-card {<restore-line-break>                                margin-right: -8px;<restore-line-break>                              }<restore-line-break></span>                        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:mushroom-entity-card</span><restore-line-break>                          <span class="hljs-attr">entity:</span> <span class="hljs-string">sensor.pl497n_average_speed</span><restore-line-break>                          <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car-cruise-control</span><restore-line-break>                          <span class="hljs-attr">icon_color:</span> <span class="hljs-string">blue</span><restore-line-break>                          <span class="hljs-attr">tap_action:</span><restore-line-break>                            <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><restore-line-break>                          <span class="hljs-attr">hold_action:</span><restore-line-break>                            <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><restore-line-break>                          <span class="hljs-attr">primary_info:</span> <span class="hljs-string">name</span><restore-line-break>                          <span class="hljs-attr">secondary_info:</span> <span class="hljs-string">state</span><restore-line-break>                          <span class="hljs-attr">name:</span> <span class="hljs-string">Gemiddelde</span> <span class="hljs-string">snelheid</span><restore-line-break>                          <span class="hljs-attr">card_mod:</span><restore-line-break>                            <span class="hljs-attr">style:</span> <span class="hljs-string">|<restore-line-break>                              ha-card {<restore-line-break>                                margin-top: -8px;<restore-line-break>                                margin-right: -15px;<restore-line-break>                              }<restore-line-break></span>                        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:mushroom-template-card</span><restore-line-break>                          <span class="hljs-attr">entity:</span> <span class="hljs-string">sensor.pl497n_range</span><restore-line-break>                          <span class="hljs-attr">primary:</span> <span class="hljs-string">Tank</span><restore-line-break>                          <span class="hljs-attr">secondary:</span> <span class="hljs-string">'<span class="hljs-template-variable">{{states(''sensor.pl497n_fuel_amount'')}}</span> L'</span><restore-line-break>                          <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:ruler</span><restore-line-break>                          <span class="hljs-attr">badge_icon:</span> <span class="hljs-literal">null</span><restore-line-break>                          <span class="hljs-attr">icon_color:</span> <span class="hljs-string">><restore-line-break>                            {% set c = states('sensor.pl497n_fuel_amount')<restore-line-break>                            |int(0) %}  {{ 'yellow' if 20 > c > 0 else 'green'<restore-line-break>                            }}<restore-line-break></span>                          <span class="hljs-attr">tap_action:</span><restore-line-break>                            <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><restore-line-break>                          <span class="hljs-attr">hold_action:</span><restore-line-break>                            <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><restore-line-break>                          <span class="hljs-attr">name:</span> <span class="hljs-string">Tank</span> <span class="hljs-string">vulling</span><restore-line-break>                          <span class="hljs-attr">card_mod:</span><restore-line-break>                            <span class="hljs-attr">style:</span> <span class="hljs-string">|<restore-line-break>                              ha-card {<restore-line-break>                                margin-top: -8px;<restore-line-break>                                margin-right: -8px;<restore-line-break>                              }<restore-line-break></span>                        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:mushroom-template-card</span><restore-line-break>                          <span class="hljs-attr">entity:</span> <span class="hljs-string">sensor.pl497n_range</span><restore-line-break>                          <span class="hljs-attr">primary:</span> <span class="hljs-string">Bereik</span><restore-line-break>                          <span class="hljs-attr">secondary:</span> <span class="hljs-string">'<span class="hljs-template-variable">{{states(''sensor.pl497n_range'')}}</span> km'</span><restore-line-break>                          <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:ruler</span><restore-line-break>                          <span class="hljs-attr">badge_icon:</span> <span class="hljs-literal">null</span><restore-line-break>                          <span class="hljs-attr">icon_color:</span> <span class="hljs-string">><restore-line-break>                            {% set c = states('sensor.pl497n_range') |int(0)<restore-line-break>                            %} {{ 'red' if 250 > c > 0 else 'green' }}<restore-line-break></span>                          <span class="hljs-attr">tap_action:</span><restore-line-break>                            <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><restore-line-break>                          <span class="hljs-attr">hold_action:</span><restore-line-break>                            <span class="hljs-attr">action:</span> <span class="hljs-string">none</span><restore-line-break>                          <span class="hljs-attr">name:</span> <span class="hljs-string">Tank</span> <span class="hljs-string">vulling</span><restore-line-break>                          <span class="hljs-attr">card_mod:</span><restore-line-break>                            <span class="hljs-attr">style:</span> <span class="hljs-string">|<restore-line-break>                              ha-card {<restore-line-break>                                margin-top: -8px;<restore-line-break>                                margin-right: -8px;<restore-line-break>                              }<restore-line-break></span>                      <span class="hljs-attr">card_mod:</span><restore-line-break>                        <span class="hljs-attr">style:</span> <span class="hljs-string">|<restore-line-break>                          ha-card {<restore-line-break>                            background: none;<restore-line-break>                            --ha-card-box-shadow: 0px;<restore-line-break>                          }<restore-line-break></span>              <span class="hljs-attr">card_mod:</span><restore-line-break>                <span class="hljs-attr">style:</span> <span class="hljs-string">|<restore-line-break>                  ha-card {<restore-line-break>                    height: 245px;<restore-line-break>                  }<restore-line-break></span>        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">picture-elements</span>  <span class="hljs-comment"># Card with elements positioned over a picture</span><restore-line-break>          <span class="hljs-attr">elements:</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-icon</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">sensor.pl497n_odometer</span>  <span class="hljs-comment"># Odometer reading</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">90</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">10</span><span class="hljs-string">%</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">state-label</span><restore-line-break>              <span class="hljs-attr">entity:</span> <span class="hljs-string">sensor.pl497n_odometer</span><restore-line-break>              <span class="hljs-attr">style:</span><restore-line-break>                <span class="hljs-attr">top:</span> <span class="hljs-number">90</span><span class="hljs-string">%</span><restore-line-break>                <span class="hljs-attr">left:</span> <span class="hljs-number">80</span><span class="hljs-string">%</span><restore-line-break>          <span class="hljs-attr">image:</span> <span class="hljs-string">/local/images/Volvo-V60.png</span><restore-line-break>      <span class="hljs-attr">view_layout:</span><restore-line-break>        <span class="hljs-attr">column:</span> <span class="hljs-number">2</span><restore-line-break>    <span class="hljs-comment"># Additional stack for miscellaneous information</span><restore-line-break>    <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">vertical-stack</span><restore-line-break>      <span class="hljs-attr">cards:</span><restore-line-break>        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">custom:mushroom-title-card</span><restore-line-break>          <span class="hljs-attr">title:</span> <span class="hljs-string">Overige</span> <span class="hljs-string">info</span>  <span class="hljs-comment"># Title for additional information</span><restore-line-break>          <span class="hljs-attr">style:</span> <span class="hljs-string">|</span>  <span class="hljs-comment"># Custom CSS for the title card</span><restore-line-break>            <span class="hljs-string">h1.title</span> {<restore-line-break>            <span class="hljs-attr">display:</span> <span class="hljs-string">flex;</span><restore-line-break>            <span class="hljs-attr">align-items:</span> <span class="hljs-string">center;</span><restore-line-break>            <span class="hljs-attr">text-align:</span> <span class="hljs-string">center;</span><restore-line-break>            <span class="hljs-attr">font-size:</span> <span class="hljs-number">2.</span><span class="hljs-string">8vh;</span><restore-line-break>            }<restore-line-break>            <span class="hljs-string">h1.title::before,</span><restore-line-break>            <span class="hljs-string">h1.title::after</span> {<restore-line-break>              <span class="hljs-attr">content:</span> <span class="hljs-string">''</span><span class="hljs-string">;</span><restore-line-break>              <span class="hljs-attr">flex:</span> <span class="hljs-number">1</span><span class="hljs-string">;</span><restore-line-break>              <span class="hljs-attr">border-bottom:</span> <span class="hljs-string">1px</span> <span class="hljs-string">solid</span> <span class="hljs-comment">#fff;</span><restore-line-break>            }<restore-line-break>            <span class="hljs-string">h1.title:not(:empty)::before</span> {<restore-line-break>              <span class="hljs-attr">margin-right:</span> <span class="hljs-string">1em;</span><restore-line-break>            }<restore-line-break>            <span class="hljs-string">h1.title:not(:empty)::after</span> {<restore-line-break>              <span class="hljs-attr">margin-left:</span> <span class="hljs-string">1em;</span><restore-line-break>            }<restore-line-break>            <span class="hljs-string">ha-card</span> {<restore-line-break>              <span class="hljs-attr">background:</span> <span class="hljs-string">none!important;</span><restore-line-break>              <span class="hljs-string">border:none</span><restore-line-break>              }<restore-line-break>        <span class="hljs-bullet">-</span> <span class="hljs-attr">type:</span> <span class="hljs-string">entities</span>  <span class="hljs-comment"># Entities card for displaying various sensors and binary sensors</span><restore-line-break>          <span class="hljs-attr">entities:</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_brake_fluid</span><restore-line-break>              <span class="hljs-attr">name:</span> <span class="hljs-string">Rem</span> <span class="hljs-string">vloeistof</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car-brake-fluid-level</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_washer_fluid</span><restore-line-break>              <span class="hljs-attr">name:</span> <span class="hljs-string">Ruitenspoei</span> <span class="hljs-string">vloeistof</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:wiper-wash</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_service</span><restore-line-break>              <span class="hljs-attr">name:</span> <span class="hljs-string">Service</span> <span class="hljs-string">benodigd</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:account-wrench</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_bulbs</span><restore-line-break>              <span class="hljs-attr">name:</span> <span class="hljs-string">Lampen</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:car-light-high</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_engine</span><restore-line-break>              <span class="hljs-attr">name:</span> <span class="hljs-string">Motor</span><restore-line-break>              <span class="hljs-attr">icon:</span> <span class="hljs-string">mdi:engine</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">entity:</span> <span class="hljs-string">binary_sensor.pl497n_windows</span><restore-line-break>              <span class="hljs-attr">name:</span> <span class="hljs-string">Ramen</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">entity:</span> <span class="hljs-string">sensor.pl497n_last_trip</span><restore-line-break>              <span class="hljs-attr">name:</span> <span class="hljs-string">Laatste</span> <span class="hljs-string">reis</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">entity:</span> <span class="hljs-string">sensor.pl497n_trip_meter_1</span><restore-line-break>              <span class="hljs-attr">name:</span> <span class="hljs-string">Reis</span> <span class="hljs-string">meter</span> <span class="hljs-number">1</span><restore-line-break>            <span class="hljs-bullet">-</span> <span class="hljs-attr">entity:</span> <span class="hljs-string">sensor.pl497n_trip_meter_2</span><restore-line-break>              <span class="hljs-attr">name:</span> <span class="hljs-string">Reis</span> <span class="hljs-string">meter</span> <span class="hljs-number">2</span><restore-line-break>      <span class="hljs-attr">view_layout:</span><restore-line-break>        <span class="hljs-attr">column:</span> <span class="hljs-number">3</span>  <span class="hljs-comment"># Layout configuration for arranging the cards within 3 columns</span><restore-line-break><restore-line-break><span class="hljs-comment"># [End of the Volvo On Call dashboard configuration]</span><restore-line-break></code></pre>
<h3 id="heading-conclusion-driving-into-the-future-of-home-automation"><strong>Conclusion: Driving into the Future of Home Automation</strong></h3>
<p>Integrating your Volvo V60 into your smart home system is more than a fancy trick; it's about embracing the future of connectivity and convenience. As we move forward, the line between our cars and homes will blur, creating a unified experience that simplifies our lives in ways we can only begin to imagine.</p>



            ]]>
        </content>
    </entry>
    <entry>
        <title>Unlocking Pages with Custom User Roles in WordPress</title>
        <author>
            <name>Theo van der Sluijs</name>
        </author>
        <link href="https://itheo.tech/unlocking-pages-with-custom-user-roles-in-wordpress.html"/>
        <id>https://itheo.tech/unlocking-pages-with-custom-user-roles-in-wordpress.html</id>
        <media:content url="https://itheo.tech/media/posts/103/620d6c13-b129-4771-ae4b-13b646c82058.png" medium="image" />

        <updated>2023-10-31T06:21:11+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://itheo.tech/media/posts/103/620d6c13-b129-4771-ae4b-13b646c82058.png" alt="" />
                    Hello, fellow WordPress enthusiasts! Have you ever wondered how you can take full control over who gets to see what on your WordPress site? Today, I'm going to share the story of how I created a custom WordPress plugin that allows you to do just&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://itheo.tech/media/posts/103/620d6c13-b129-4771-ae4b-13b646c82058.png" class="type:primaryImage" alt="" /></p>
                <p>Hello, fellow WordPress enthusiasts! Have you ever wondered how you can take full control over who gets to see what on your WordPress site? Today, I'm going to share the story of how I created a custom WordPress plugin that allows you to do just that. And guess what? You can easily replicate this functionality on your own website!</p>
<h2 id="heading-the-journey-begins-why-did-i-create-this-code">The Journey Begins: Why Did I Create This Code?</h2>
<p>Once upon a time, I was managing multiple projects with various team members who had different roles within the organization. We used WordPress as the platform for our internal communication and documentation. However, it quickly became a challenge to manage who had access to what. The default user roles in WordPress—like Editor, Author, and Subscriber—were too broad for our specific use case. I thought, "There's got to be a better way!"</p>
<p>And so, armed with my development skills and a cup of coffee, I took it upon myself to solve this issue. I decided to create a custom plugin that would allow me to specify which user roles could access specific pages. It was an exhilarating process, full of coding, debugging, and, well, more debugging.</p>
<h2 id="heading-so-how-does-it-work">So, How Does It Work?</h2>
<p>Before we dive into the code, let's outline what we want to achieve. We need:</p>
<ol>
<li>
<p>A new meta box in the WordPress Page editor where you can select which user roles have access to the page.</p>
</li>
<li>
<p>A mechanism to check a user's role when they try to access a page and redirect them if they don't have the required role.</p>
</li>
</ol>
<p>Sounds fun, right? Let's get to it!</p>
<h3 id="heading-step-1-add-a-meta-box-for-role-selection">Step 1: Add a Meta Box for Role Selection</h3>
<p>Firstly, we use WordPress hooks to add a meta box on the page editor screen. This meta box will contain checkboxes for all the available user roles.</p>
<pre><code class="lang-php"><span class="hljs-comment">// Add meta box for role selection</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_role_access_metabox</span>(<span class="hljs-params"></span>) </span>{<restore-line-break>    add_meta_box(<restore-line-break>        <span class="hljs-string">'role_access_metabox'</span>, <span class="hljs-comment">// Meta box ID</span><restore-line-break>        <span class="hljs-string">'Role Access'</span>, <span class="hljs-comment">// Title</span><restore-line-break>        <span class="hljs-string">'role_access_metabox_callback'</span>, <span class="hljs-comment">// Callback function</span><restore-line-break>        <span class="hljs-string">'page'</span>, <span class="hljs-comment">// Post type</span><restore-line-break>        <span class="hljs-string">'side'</span> <span class="hljs-comment">// Context</span><restore-line-break>    );<restore-line-break>}<restore-line-break>add_action(<span class="hljs-string">'add_meta_boxes'</span>, <span class="hljs-string">'add_role_access_metabox'</span>);<restore-line-break></code></pre>
<ul>
<li>
<p><strong>Meta box ID:</strong> A unique identifier for the meta box.</p>
</li>
<li>
<p><strong>Title:</strong> The title that appears on the meta box.</p>
</li>
<li>
<p><strong>Callback function:</strong> The function that outputs the content of the meta box.</p>
</li>
<li>
<p><strong>Post type:</strong> Specifies that this meta box is for 'page'.</p>
</li>
<li>
<p><strong>Context:</strong> Specifies that this meta box should appear on the side of the editor.</p>
</li>
</ul>
<h3 id="heading-step-2-define-whats-inside-the-meta-box">Step 2: Define What's Inside the Meta Box</h3>
<p>The meta box will display checkboxes for each user role. When you select a checkbox, the corresponding role will have access to the page.</p>
<pre><code class="lang-php"><span class="hljs-comment">// Meta box callback function</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">role_access_metabox_callback</span>(<span class="hljs-params">$post</span>) </span>{<restore-line-break>    <span class="hljs-comment">// ... code ...</span><restore-line-break>    <span class="hljs-keyword">foreach</span> ($all_roles <span class="hljs-keyword">as</span> $role => $details) {<restore-line-break>        <span class="hljs-comment">// ... code ...</span><restore-line-break>    }<restore-line-break>}<restore-line-break></code></pre>
<p>In the above code, <code>$all_roles</code> holds an array of all user roles. We loop through each role to generate a checkbox. Simple yet effective!</p>
<h3 id="heading-step-3-save-user-roles-as-metadata">Step 3: Save User Roles as Metadata</h3>
<p>After selecting which roles can access the page, we need to save this information.</p>
<pre><code class="lang-php"><span class="hljs-comment">// Save post meta data</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save_role_access</span>(<span class="hljs-params">$post_id</span>) </span>{<restore-line-break>    <span class="hljs-comment">// ... code ...</span><restore-line-break>    update_post_meta($post_id, <span class="hljs-string">'_custom_allowed_roles'</span>, $new_roles);<restore-line-break>}<restore-line-break>add_action(<span class="hljs-string">'save_post'</span>, <span class="hljs-string">'save_role_access'</span>);<restore-line-break></code></pre>
<p>Here, we save the selected roles as metadata for the page.</p>
<h3 id="heading-step-4-implement-access-control">Step 4: Implement Access Control</h3>
<p>Lastly, we add a mechanism to check if a user has the required role to view a page.</p>
<pre><code class="lang-php"><span class="hljs-comment">// Redirect users without access</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_page_access</span>(<span class="hljs-params"></span>) </span>{<restore-line-break>    <span class="hljs-comment">// ... code ...</span><restore-line-break>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>($allowed)) {<restore-line-break>        wp_redirect(home_url());<restore-line-break>        <span class="hljs-keyword">exit</span>;<restore-line-break>    }<restore-line-break>}<restore-line-break>add_action(<span class="hljs-string">'wp'</span>, <span class="hljs-string">'check_page_access'</span>);<restore-line-break></code></pre>
<p>If a user tries to access a page they don't have permission to view, they are redirected to the home page.</p>
<p>And there you have it, folks! You can now specify which user roles have access to individual WordPress pages.</p>
<h2 id="heading-conclusion">Conclusion</h2>
<p>It's empowering to have complete control over who can access your content. By using this custom plugin, you can fine-tune page visibility to specific user roles, making your WordPress website a more secure and organized space.</p>
<p>Here's the complete code for your perusal:</p>
<pre><code class="lang-php"><span class="hljs-meta"><?php</span><restore-line-break><span class="hljs-comment">/**<restore-line-break> * Plugin Name: Custom Role Access<restore-line-break> * Description: Limit page access by user roles.<restore-line-break> * Version: 1.0<restore-line-break> * Author: Theo van der Sluijs<restore-line-break> */</span><restore-line-break><restore-line-break><span class="hljs-comment">// Add meta box for role selection</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_role_access_metabox</span>(<span class="hljs-params"></span>) </span>{<restore-line-break>    add_meta_box(<restore-line-break>        <span class="hljs-string">'role_access_metabox'</span>,<restore-line-break>        <span class="hljs-string">'Role Access'</span>,<restore-line-break>        <span class="hljs-string">'role_access_metabox_callback'</span>,<restore-line-break>        <span class="hljs-string">'page'</span>,<restore-line-break>        <span class="hljs-string">'side'</span><restore-line-break>    );<restore-line-break>}<restore-line-break>add_action(<span class="hljs-string">'add_meta_boxes'</span>, <span class="hljs-string">'add_role_access_metabox'</span>);<restore-line-break><restore-line-break><span class="hljs-comment">// Meta box callback function</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">role_access_metabox_callback</span>(<span class="hljs-params">$post</span>) </span>{<restore-line-break>    $roles = get_option(<span class="hljs-string">'custom_allowed_roles'</span>);<restore-line-break>    $roles = is_array($roles) ? $roles : [];<restore-line-break><restore-line-break>    $all_roles = get_editable_roles();<restore-line-break>    $selected_roles = get_post_meta($post->ID, <span class="hljs-string">'_custom_allowed_roles'</span>, <span class="hljs-literal">true</span>);<restore-line-break>    $selected_roles = is_array($selected_roles) ? $selected_roles : [];<restore-line-break><restore-line-break>    wp_nonce_field(<span class="hljs-string">'role_access_metabox'</span>, <span class="hljs-string">'role_access_metabox_nonce'</span>);<restore-line-break>    <span class="hljs-keyword">foreach</span> ($all_roles <span class="hljs-keyword">as</span> $role => $details) {<restore-line-break>        $name = translate_user_role($details[<span class="hljs-string">'name'</span>]);<restore-line-break>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'<input type="checkbox" name="custom_allowed_roles[]" value="'</span> . esc_attr($role) . <span class="hljs-string">'"'</span>;<restore-line-break>        <span class="hljs-keyword">if</span> (in_array($role, $selected_roles)) {<restore-line-break>            <span class="hljs-keyword">echo</span> <span class="hljs-string">' checked="checked"'</span>;<restore-line-break>        }<restore-line-break>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'> '</span> . esc_html($name) . <span class="hljs-string">'<br>'</span>;<restore-line-break>    }<restore-line-break>}<restore-line-break><restore-line-break><span class="hljs-comment">// Save post meta data</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save_role_access</span>(<span class="hljs-params">$post_id</span>) </span>{<restore-line-break>    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'role_access_metabox_nonce'</span>]) || !wp_verify_nonce($_POST[<span class="hljs-string">'role_access_metabox_nonce'</span>], <span class="hljs-string">'role_access_metabox'</span>)) {<restore-line-break>        <span class="hljs-keyword">return</span>;<restore-line-break>    }<restore-line-break>    <span class="hljs-keyword">if</span> (defined(<span class="hljs-string">'DOING_AUTOSAVE'</span>) && DOING_AUTOSAVE) {<restore-line-break>        <span class="hljs-keyword">return</span>;<restore-line-break>    }<restore-line-break>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'post_type'</span>]) && <span class="hljs-string">'page'</span> == $_POST[<span class="hljs-string">'post_type'</span>]) {<restore-line-break>        <span class="hljs-keyword">if</span> (!current_user_can(<span class="hljs-string">'edit_page'</span>, $post_id)) {<restore-line-break>            <span class="hljs-keyword">return</span>;<restore-line-break>        }<restore-line-break>    }<restore-line-break>    $new_roles = <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'custom_allowed_roles'</span>]) ? $_POST[<span class="hljs-string">'custom_allowed_roles'</span>] : [];<restore-line-break>    update_post_meta($post_id, <span class="hljs-string">'_custom_allowed_roles'</span>, $new_roles);<restore-line-break>}<restore-line-break>add_action(<span class="hljs-string">'save_post'</span>, <span class="hljs-string">'save_role_access'</span>);<restore-line-break><restore-line-break><span class="hljs-comment">// Redirect users without access</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check_page_access</span>(<span class="hljs-params"></span>) </span>{<restore-line-break>    <span class="hljs-keyword">if</span> (is_page() && !is_user_logged_in()) {<restore-line-break>        <span class="hljs-keyword">global</span> $post;<restore-line-break>        $selected_roles = get_post_meta($post->ID, <span class="hljs-string">'_custom_allowed_roles'</span>, <span class="hljs-literal">true</span>);<restore-line-break>        <span class="hljs-keyword">if</span> (is_array($selected_roles) && !<span class="hljs-keyword">empty</span>($selected_roles)) {<restore-line-break>            wp_redirect(home_url());<restore-line-break>            <span class="hljs-keyword">exit</span>;<restore-line-break>        }<restore-line-break>    }<restore-line-break>    <span class="hljs-keyword">if</span> (is_page() && is_user_logged_in()) {<restore-line-break>        <span class="hljs-keyword">global</span> $post, $current_user;<restore-line-break>        $selected_roles = get_post_meta($post->ID, <span class="hljs-string">'_custom_allowed_roles'</span>, <span class="hljs-literal">true</span>);<restore-line-break>        <span class="hljs-keyword">if</span> (is_array($selected_roles) && !<span class="hljs-keyword">empty</span>($selected_roles)) {<restore-line-break>            $user_roles = $current_user->roles;<restore-line-break>            $allowed = array_intersect($selected_roles, $user_roles);<restore-line-break>            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>($allowed)) {<restore-line-break>                wp_redirect(home_url());<restore-line-break>                <span class="hljs-keyword">exit</span>;<restore-line-break>            }<restore-line-break>        }<restore-line-break>    }<restore-line-break>}<restore-line-break>add_action(<span class="hljs-string">'wp'</span>, <span class="hljs-string">'check_page_access'</span>);<restore-line-break><span class="hljs-meta">?></span><restore-line-break></code></pre>
<p>I hope you found this tutorial exciting and useful. Do you have any questions or something to add? Feel free to comment below! Until next time, happy coding!</p>



            ]]>
        </content>
    </entry>
    <entry>
        <title>Crafting a Custom WordPress Login Page With Shortcodes</title>
        <author>
            <name>Theo van der Sluijs</name>
        </author>
        <link href="https://itheo.tech/crafting-a-custom-wordpress-login-page-with-shortcodes.html"/>
        <id>https://itheo.tech/crafting-a-custom-wordpress-login-page-with-shortcodes.html</id>
        <media:content url="https://itheo.tech/media/posts/104/d9a2b206-a72e-4928-b684-1b6c91eec313.png" medium="image" />

        <updated>2023-10-30T05:23:09+01:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://itheo.tech/media/posts/104/d9a2b206-a72e-4928-b684-1b6c91eec313.png" alt="" />
                    Hello, fellow WordPress enthusiasts! Today, I'm going to share with you a little adventure I embarked on in the realm of WordPress customization. Why did I decide to do this? Well, because the default WordPress login page (wp-login.php) lacks a certain flair and isn't always&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://itheo.tech/media/posts/104/d9a2b206-a72e-4928-b684-1b6c91eec313.png" class="type:primaryImage" alt="" /></p>
                <p>Hello, fellow WordPress enthusiasts! Today, I'm going to share with you a little adventure I embarked on in the realm of WordPress customization. Why did I decide to do this? Well, because the default WordPress login page (<code>wp-login.php</code>) lacks a certain flair and isn't always the best option for every site. And as someone who loves to tinker and optimize, I just couldn't resist the urge to create a more streamlined login process.</p>
<p>So, I decided to design a custom login page that you can embed directly within your WordPress posts or pages. What makes it better? You won't have to redirect your users to <code>wp-login.php</code> anymore! This means a smoother, more integrated user experience. The best part is, you can do this with a simple PHP script and the Snippets plugin.</p>
<p>Let's dive in!</p>
<h2 id="heading-why-ditch-the-default-login-page">Why Ditch the Default Login Page?</h2>
<p>Don't get me wrong, <code>wp-login.php</code> does the job. However, it's often an abrupt change from the main site's branding, layout, and overall user experience. Users are yanked out of the environment they were in, which can be jarring. That's why I thought it'd be great to let users log in without ever leaving the page they're on.</p>
<h2 id="heading-using-the-snippets-plugin">Using the Snippets Plugin</h2>
<p>First thing's first—install the <a target="_blank" href="https://wordpress.org/plugins/code-snippets/" rel="noopener">Snippets plugin</a>. This gem lets you run PHP code snippets directly in your WordPress dashboard without having to modify your theme files.</p>
<h2 id="heading-breaking-down-the-code">Breaking Down the Code</h2>
<p>Let's look at each section of our custom login script.</p>
<h3 id="heading-function-declaration">Function Declaration</h3>
<pre><code class="lang-php"><span class="hljs-comment">// Declare a function that'll be turned into a shortcode</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_login_form_shortcode</span>(<span class="hljs-params"></span>) </span>{<restore-line-break></code></pre>
<p>Here we declare a function called <code>custom_login_form_shortcode</code>. This function will be turned into a shortcode later.</p>
<h3 id="heading-logged-in-check">Logged-in Check</h3>
<pre><code class="lang-php"><span class="hljs-comment">// Check if the user is already logged in</span><restore-line-break><span class="hljs-keyword">if</span> ( is_user_logged_in() ) {<restore-line-break>    <span class="hljs-keyword">return</span> <span class="hljs-string">'You are already logged in!'</span>;<restore-line-break>}<restore-line-break></code></pre>
<p>The <code>is_user_logged_in()</code> function checks if the user is already logged in. If so, it simply returns a message stating that the user is already logged in.</p>
<h3 id="heading-html-form">HTML Form</h3>
<pre><code class="lang-php"><span class="hljs-comment">// The HTML form for login</span><restore-line-break>$output = <span class="hljs-string">'<restore-line-break><form action="" method="post">...</form>'</span>;<restore-line-break></code></pre>
<p>This part of the code generates the HTML login form. We use the <code>post</code> method to send form data.</p>
<h3 id="heading-login-logic">Login Logic</h3>
<pre><code class="lang-php"><span class="hljs-comment">// Logic for authenticating the user</span><restore-line-break><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'custom_login'</span>])) {...}<restore-line-break></code></pre>
<p>The <code>if</code> statement checks whether the form was submitted. If it was, the script attempts to log the user in.</p>
<h3 id="heading-sign-on">Sign-On</h3>
<pre><code class="lang-php"><span class="hljs-comment">// WordPress function to sign-on the user</span><restore-line-break>$user = wp_signon( $creds, <span class="hljs-literal">false</span> );<restore-line-break></code></pre>
<p><code>wp_signon</code> is a WordPress function that tries to log the user in with the credentials (<code>$creds</code>) provided. If successful, it redirects to the current page.</p>
<h3 id="heading-error-handling">Error Handling</h3>
<pre><code class="lang-php"><span class="hljs-comment">// Check for errors and display messages</span><restore-line-break><span class="hljs-keyword">if</span> ( is_wp_error($user) ) {...}<restore-line-break></code></pre>
<p>This section checks for login errors and displays error messages if necessary.</p>
<h3 id="heading-shortcode-registration">Shortcode Registration</h3>
<pre><code class="lang-php"><span class="hljs-comment">// Register the shortcode</span><restore-line-break>add_shortcode(<span class="hljs-string">'custom_login_form'</span>, <span class="hljs-string">'custom_login_form_shortcode'</span>);<restore-line-break></code></pre>
<p>Finally, <code>add_shortcode</code> registers our function as a shortcode, making it available to be used anywhere in WordPress.</p>
<hr />
<p>Here's the complete code:</p>
<pre><code class="lang-php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_login_form_shortcode</span>(<span class="hljs-params"></span>) </span>{<restore-line-break>    <span class="hljs-keyword">if</span> ( is_user_logged_in() ) {<restore-line-break>        <span class="hljs-keyword">return</span> <span class="hljs-string">'You are already logged in!'</span>;<restore-line-break>    }<restore-line-break><restore-line-break>    $output = <span class="hljs-string">'<restore-line-break>    <form action="" method="post"><restore-line-break>        
<div><restore-line-break>            <label for="username">Username:</label><restore-line-break>            <input type="text" name="username" id="username" required><restore-line-break>        </div>
<p><restore-line-break>        
<div><restore-line-break>            <label for="password">Password:</label><restore-line-break>            <input type="password" name="password" id="password" required><restore-line-break>        </div>
<p><restore-line-break>        <input type="submit" name="custom_login" value="Login"><restore-line-break>    </form>'</span>;<restore-line-break><restore-line-break>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">'custom_login'</span>])) {<restore-line-break>        $creds = <span class="hljs-keyword">array</span>(<restore-line-break>            <span class="hljs-string">'user_login'</span>    => sanitize_text_field($_POST[<span class="hljs-string">'username'</span>]),<restore-line-break>            <span class="hljs-string">'user_password'</span> => $_POST[<span class="hljs-string">'password'</span>],<restore-line-break>            <span class="hljs-string">'remember'</span>      => <span class="hljs-literal">true</span><restore-line-break>        );<restore-line-break><restore-line-break>        $user = wp_signon( $creds, <span class="hljs-literal">false</span> );<restore-line-break><restore-line-break>        <span class="hljs-keyword">if</span> ( is_wp_error($user) ) {<restore-line-break>            $output .= <span class="hljs-string">'
<div class="error">'</span> . $user->get_error_message() . <span class="hljs-string">'</div>
<p>'</span>;<restore-line-break>        } <span class="hljs-keyword">else</span> {<restore-line-break>            wp_redirect($_SERVER[<span class="hljs-string">'REQUEST_URI'</span>]);<restore-line-break>            <span class="hljs-keyword">exit</span>();<restore-line-break>        }<restore-line-break>    }<restore-line-break><restore-line-break>    <span class="hljs-keyword">return</span> $output;<restore-line-break>}<restore-line-break>add_shortcode(<span class="hljs-string">'custom_login_form'</span>, <span class="hljs-string">'custom_login_form_shortcode'</span>);<restore-line-break></code></pre>
<p>And there you have it! You can now add the <code>[custom_login_form]</code> shortcode to any page, and your custom login form will appear. Use the Snippets plugin to add this function and let your website’s login shine!</p>
<p>Cheers and happy coding!  </p>



            ]]>
        </content>
    </entry>
    <entry>
        <title>Taking Home Assistant Notifications to the Next Level with ntfy.sh</title>
        <author>
            <name>Theo van der Sluijs</name>
        </author>
        <link href="https://itheo.tech/taking-home-assistant-notifications-to-the-next-level-with-ntfysh.html"/>
        <id>https://itheo.tech/taking-home-assistant-notifications-to-the-next-level-with-ntfysh.html</id>
        <media:content url="https://itheo.tech/media/posts/105/c50c3a78-174b-4eb6-9fb6-5fcbb6204f7e.webp" medium="image" />

        <updated>2023-10-21T13:13:40+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://itheo.tech/media/posts/105/c50c3a78-174b-4eb6-9fb6-5fcbb6204f7e.webp" alt="" />
                    Hey, everyone! Theo here. If you're into Home Automation as much as I am, you know the value of a good notification system. Today, we're talking about spicing up Home Assistant with ntfy.sh notifications. I've moved away from the default Home Assistant notifier for various&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://itheo.tech/media/posts/105/c50c3a78-174b-4eb6-9fb6-5fcbb6204f7e.webp" class="type:primaryImage" alt="" /></p>
                <p>Hey, everyone! Theo here. If you're into Home Automation as much as I am, you know the value of a good notification system. Today, we're talking about spicing up Home Assistant with <a target="_blank" href="http://ntfy.sh" rel="noopener">ntfy.sh</a> notifications. I've moved away from the default Home Assistant notifier for various reasons, and I'm here to show you how you can too.</p>
<h3 id="heading-why-ntfyshhttpntfysh">Why <a target="_blank" href="http://ntfy.sh" rel="noopener">ntfy.sh</a>?</h3>
<p>So, why switch? The built-in Home Assistant notifier is alright, but it's not as flexible as I’d like. <a target="_blank" href="http://ntfy.sh" rel="noopener">ntfy.sh</a> offers:</p>
<ul>
<li>
<p>Customizable alerts</p>
</li>
<li>
<p>Versatility in backend support</p>
</li>
<li>
<p>Native app support for iOS and Android</p>
</li>
</ul>
<p>It’s geeky, it’s cool, and most importantly, it gives you more control!</p>
<h3 id="heading-setting-up-ntfyshhttpntfysh-the-easy-way">Setting Up <a target="_blank" href="http://ntfy.sh" rel="noopener">ntfy.sh</a> the Easy Way</h3>
<p>Instead of diving into Python and pip installs, you can use Home Assistant's <code>shell_command</code> to set up <a target="_blank" href="http://ntfy.sh" rel="noopener">ntfy.sh</a>. It's a simple, effective method that gets the job done.</p>
<h3 id="heading-configuring-configurationyml-in-home-assistant">Configuring <code>configuration.yml</code> in Home Assistant</h3>
<p>To add <a target="_blank" href="http://ntfy.sh" rel="noopener">ntfy.sh</a> as a shell command, edit your Home Assistant's <code>configuration.yml</code> file like so:</p>
<pre><code class="lang-yaml"><span class="hljs-comment"># Adding ntfy as a shell command</span><restore-line-break><span class="hljs-attr">shell_command:</span><restore-line-break>  <span class="hljs-attr">ntfy:</span> <span class="hljs-string">><restore-line-break>    curl<restore-line-break>    -X POST<restore-line-break>    --url 'https://ntfy.sh/{{ topic }}'<restore-line-break>    --data '{{ message }}'<restore-line-break>    --header 'X-Title: {{ title }}'<restore-line-break>    --header 'X-Tags: {{ tags }}'<restore-line-break>    --header 'X-Priority: {{ priority }}'<restore-line-break>    --header 'X-Delay: {{ delay }}'<restore-line-break>    --header 'X-Actions: {{ actions }}'<restore-line-break>    --header 'X-Markdown: {{ markdown }}'<restore-line-break>    --header 'X-Click: {{ click }}'<restore-line-break>    --header 'X-Icon: {{ icon }}'</span><restore-line-break></code></pre>
<p>This part sets up a shell command called <code>ntfy</code>. It uses <code>curl</code> to POST a message to the <a target="_blank" href="http://ntfy.sh" rel="noopener"><code>ntfy.sh</code></a> service. The syntax allows for an array of customizable fields like title, tags, and even the notification's icon.</p>
<h3 id="heading-using-ntfyshhttpntfysh-in-automation">Using <a target="_blank" href="http://ntfy.sh" rel="noopener">ntfy.sh</a> in Automation</h3>
<p>Now that <a target="_blank" href="http://ntfy.sh" rel="noopener">ntfy.sh</a> is set as a shell command, let’s use it in an automation task:</p>
<pre><code class="lang-yaml"><span class="hljs-attr">automation:</span><restore-line-break>  <span class="hljs-bullet">-</span> <span class="hljs-attr">alias:</span> <span class="hljs-string">'Notify When Door Opens'</span><restore-line-break>    <span class="hljs-attr">trigger:</span><restore-line-break>      <span class="hljs-attr">platform:</span> <span class="hljs-string">state</span><restore-line-break>      <span class="hljs-attr">entity_id:</span> <span class="hljs-string">binary_sensor.door</span><restore-line-break>      <span class="hljs-attr">to:</span> <span class="hljs-string">'on'</span><restore-line-break>    <span class="hljs-attr">action:</span><restore-line-break>      <span class="hljs-attr">service:</span> <span class="hljs-string">shell_command.ntfy</span><restore-line-break>      <span class="hljs-attr">data:</span><restore-line-break>        <span class="hljs-attr">topic:</span> <span class="hljs-string">'home'</span><restore-line-break>        <span class="hljs-attr">message:</span> <span class="hljs-string">'Door Open!'</span><restore-line-break>        <span class="hljs-attr">title:</span> <span class="hljs-string">'Security Alert'</span><restore-line-break></code></pre>
<p>Breaking it down:</p>
<ul>
<li>
<p><code>alias:</code>: The name of our automation.</p>
</li>
<li>
<p><code>trigger:</code>: The door sensor going 'on' will trigger this automation.</p>
</li>
<li>
<p><code>action:</code>: The <code>ntfy</code> shell command is executed here.</p>
</li>
<li>
<p><code>data:</code>: The <code>message</code>, and <code>title</code> fields specify what the notification will look like and say.</p>
</li>
<li>
<p><code>topic</code>, yes you also need a topic in the data, but I wanted to clarify that you should pick a unique name for it. Home, is not really unique and I'm guessing more people will use this topic. So every time somebody is sending a notification to home, you will also receive it. So it's best to create a unique one, like the initials of your name hash real topic or something like that. If I would want to have a home topic, I would name it : tvdsluijs_home.</p>
</li>
</ul>
<h3 id="heading-connecting-ntfyshhttpntfysh-app-on-ios-and-android">Connecting <a target="_blank" href="http://ntfy.sh" rel="noopener">ntfy.sh</a> App on iOS and Android</h3>
<p>For real-time updates, you should install the <a target="_blank" href="http://ntfy.sh" rel="noopener">ntfy.sh</a> mobile app. Once you sign in, you're set to receive your customized notifications. Just connect to your own topic (that is why it should be a unique topic name. And you will receive the notifications on your phone.</p>
<h3 id="heading-benefits">Benefits</h3>
<p>Switching to <a target="_blank" href="http://ntfy.sh" rel="noopener">ntfy.sh</a> brings:</p>
<ul>
<li>
<p>Enhanced control</p>
</li>
<li>
<p>Multi-platform versatility</p>
</li>
<li>
<p>More personalization for your smart home experienceSo there you have it—a fun and simple way to add a layer of sophistication to your Home Assistant notifications with <a target="_blank" href="http://ntfy.sh" rel="noopener">ntfy.sh</a>. Feel free to hit me up in the comments with your thoughts or questions. Keep hacking your home!</p>
</li>
</ul>



            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Control Your Shelly Plug S LED Light with Python</title>
        <author>
            <name>Theo van der Sluijs</name>
        </author>
        <link href="https://itheo.tech/how-to-control-your-shelly-plug-s-led-light-with-python.html"/>
        <id>https://itheo.tech/how-to-control-your-shelly-plug-s-led-light-with-python.html</id>
        <media:content url="https://itheo.tech/media/posts/106/13f0c58f025c1c1310b3c254e1c25141.jpeg" medium="image" />

        <updated>2023-10-19T17:01:12+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://itheo.tech/media/posts/106/13f0c58f025c1c1310b3c254e1c25141.jpeg" alt="" />
                    Hey folks! Theo here. I'm a Python Developer, Product Owner, and a bit of an all-around tech enthusiast. If you're like me, you're fascinated by home automation, energy management, and all things sustainable. That's why I've turned my attention to something incredibly fun: controlling the&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://itheo.tech/media/posts/106/13f0c58f025c1c1310b3c254e1c25141.jpeg" class="type:primaryImage" alt="" /></p>
                <p>Hey folks! Theo here. I'm a Python Developer, Product Owner, and a bit of an all-around tech enthusiast. If you're like me, you're fascinated by home automation, energy management, and all things sustainable. That's why I've turned my attention to something incredibly fun: controlling the LED light on my Shelly Plug S using Python.</p>
<h2 id="heading-why-did-i-create-this-code">Why Did I Create This Code?</h2>
<p>You might be wondering, "Why would anyone want to control an LED light on a smart plug?" Well, why not? Home automation isn't just about practicality; it's also about having fun and experimenting. Plus, controlling the LED light can be useful. For example, you can change the color to indicate different energy usage levels or simply to match the aesthetic of your room.</p>
<p>And the best part? It's done using Python, a language that I just can't get enough of. The plan was to make the LED light not only switch on and off but also change colors and even blink. Imagine walking into a room and the LED light blinks in your favorite color to welcome you. Cool, right? So let's dive in.</p>
<h2 id="heading-the-prerequisites">The Prerequisites</h2>
<p>Before we jump into the code, you need to have Python installed on your computer. If you haven't yet, you can download it from <a target="_blank" href="http://python.org" rel="noopener">python.org</a>. You'll also need the <code>requests</code> library for making HTTP calls. You can install it via pip:</p>
<pre><code class="lang-bash">pip install requests<restore-line-break></code></pre>
<h2 id="heading-explaining-the-code-structure">Explaining the Code Structure</h2>
<p>The script is divided into several functions, each handling a specific interaction with the Shelly Plug S:</p>
<ol>
<li>
<p><code>get_shelly_status()</code>: Retrieves the status of the Shelly device.</p>
</li>
<li>
<p><code>turn_shelly_on()</code>: Turns the Shelly device on.</p>
</li>
<li>
<p><code>turn_shelly_off()</code>: Turns the Shelly device off.</p>
</li>
<li>
<p><code>set_shelly_led()</code>: Sets the LED color and status.</p>
</li>
<li>
<p><code>blink_shelly_led()</code>: Makes the LED blink.</p>
</li>
</ol>
<h3 id="heading-get-shelly-status">Get Shelly Status</h3>
<p>Let's start with the <code>get_shelly_status()</code> function. This function uses the <code>requests.get</code> method to fetch the current status of your Shelly device.</p>
<pre><code class="lang-python"><span class="hljs-comment"># Fetch the current status of the Shelly device.</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_shelly_status</span>(<span class="hljs-params">ip_address</span>):</span><restore-line-break>    url = <span class="hljs-string">f'http://<span class="hljs-subst">{ip_address}</span>/status'</span><restore-line-break>    <span class="hljs-keyword">try</span>:<restore-line-break>        <span class="hljs-comment"># Make a GET request to the Shelly device's status URL</span><restore-line-break>        response = requests.get(url)<restore-line-break>        <span class="hljs-comment"># Check for successful response</span><restore-line-break>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<restore-line-break>            <span class="hljs-comment"># Parse the JSON response and return</span><restore-line-break>            <span class="hljs-keyword">return</span> json.loads(response.text)<restore-line-break>        <span class="hljs-keyword">else</span>:<restore-line-break>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><restore-line-break>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<restore-line-break>        print(<span class="hljs-string">f"An error occurred: <span class="hljs-subst">{e}</span>"</span>)<restore-line-break>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><restore-line-break></code></pre>
<h3 id="heading-turn-shelly-on-and-off">Turn Shelly On and Off</h3>
<p>Next, we have <code>turn_shelly_on()</code> and <code>turn_shelly_off()</code> functions. Both of these use the <code>requests.get</code> method to send an HTTP GET request to the appropriate relay URL.</p>
<pre><code class="lang-python"><span class="hljs-comment"># Turn the Shelly device on.</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">turn_shelly_on</span>(<span class="hljs-params">ip_address</span>):</span><restore-line-break>    url = <span class="hljs-string">f'http://<span class="hljs-subst">{ip_address}</span>/relay/0/on'</span><restore-line-break>    <span class="hljs-keyword">try</span>:<restore-line-break>        response = requests.get(url)<restore-line-break>        <span class="hljs-keyword">return</span> response.status_code == <span class="hljs-number">200</span><restore-line-break>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<restore-line-break>        print(<span class="hljs-string">f"An error occurred: <span class="hljs-subst">{e}</span>"</span>)<restore-line-break>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><restore-line-break></code></pre>
<pre><code class="lang-python"><span class="hljs-comment"># Turn the Shelly device off.</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">turn_shelly_off</span>(<span class="hljs-params">ip_address</span>):</span><restore-line-break>    url = <span class="hljs-string">f'http://<span class="hljs-subst">{ip_address}</span>/relay/0/off'</span><restore-line-break>    <span class="hljs-keyword">try</span>:<restore-line-break>        response = requests.get(url)<restore-line-break>        <span class="hljs-keyword">return</span> response.status_code == <span class="hljs-number">200</span><restore-line-break>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<restore-line-break>        print(<span class="hljs-string">f"An error occurred: <span class="hljs-subst">{e}</span>"</span>)<restore-line-break>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><restore-line-break></code></pre>
<h3 id="heading-set-shelly-led">Set Shelly LED</h3>
<p>Now comes the exciting part—<code>set_shelly_led()</code>. This function allows us to set the color and status of the LED. We send a JSON payload via a POST request to adjust the LED settings.</p>
<pre><code class="lang-python"><span class="hljs-comment"># Set the LED's status and color</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_shelly_led</span>(<span class="hljs-params">ip_address, led_status, led_color=None</span>):</span><restore-line-break>    url = <span class="hljs-string">f'http://<span class="hljs-subst">{ip_address}</span>/settings/led/0'</span><restore-line-break>    payload = {<restore-line-break>        <span class="hljs-string">'ison'</span>: <span class="hljs-string">'true'</span> <span class="hljs-keyword">if</span> led_status <span class="hljs-keyword">else</span> <span class="hljs-string">'false'</span><restore-line-break>    }<restore-line-break>    <span class="hljs-keyword">if</span> led_color:<restore-line-break>        payload[<span class="hljs-string">'red'</span>] = led_color.get(<span class="hljs-string">'red'</span>, <span class="hljs-number">0</span>)<restore-line-break>        payload[<span class="hljs-string">'green'</span>] = led_color.get(<span class="hljs-string">'green'</span>, <span class="hljs-number">0</span>)<restore-line-break>        payload[<span class="hljs-string">'blue'</span>] = led_color.get(<span class="hljs-string">'blue'</span>, <span class="hljs-number">0</span>)<restore-line-break>    <span class="hljs-keyword">try</span>:<restore-line-break>        response = requests.post(url, json=payload)<restore-line-break>        <span class="hljs-keyword">return</span> response.status_code == <span class="hljs-number">200</span><restore-line-break>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<restore-line-break>        print(<span class="hljs-string">f"An error occurred: <span class="hljs-subst">{e}</span>"</span>)<restore-line-break>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><restore-line-break></code></pre>
<h3 id="heading-blink-shelly-led">Blink Shelly LED</h3>
<p>Finally, we have <code>blink_shelly_led()</code>, which simply loops through turning the LED on and off to create a blinking effect.</p>
<pre><code class="lang-python"><span class="hljs-comment"># Make the LED blink</span><restore-line-break><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">blink_shelly_led</span>(<span class="hljs-params">ip_address, led_color, times=<span class="hljs-number">5</span>, interval=<span class="hljs-number">1</span></span>):</span><restore-line-break>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(times):<restore-line-break>        set_shelly_led(ip_address, <span class="hljs-literal">True</span>, led_color)<restore-line-break>        time.sleep(interval)<restore-line-break>        set_shelly_led(ip_address, <span class="hljs-literal">False</span>)<restore-line-break>        time.sleep(interval)<restore-line-break></code></pre>
<h2 id="heading-the-complete-code">The Complete Code</h2>
<p>Here's the complete code including the inline comments.</p>
<pre><code class="lang-python"><span class="hljs-keyword">import</span> requests<restore-line-break><span class="hljs-keyword">import</span> json<restore-line-break><span class="hljs-keyword">import</span> time<restore-line-break><restore-line-break><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_shelly_status</span>(<span class="hljs-params">ip_address</span>):</span><restore-line-break>    url = <span class="hljs-string">f'http://<span class="hljs-subst">{ip_address}</span>/status'</span><restore-line-break>    <span class="hljs-keyword">try</span>:<restore-line-break>        response = requests.get(url)<restore-line-break>        <span class="hljs-keyword">if</span> response.status_code == <span class="hljs-number">200</span>:<restore-line-break>            <span class="hljs-keyword">return</span> json.loads(response.text)<restore-line-break>        <span class="hljs-keyword">else</span>:<restore-line-break>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><restore-line-break>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<restore-line-break>        print(<span class="hljs-string">f"An error occurred: <span class="hljs-subst">{e}</span>"</span>)<restore-line-break>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><restore-line-break><restore-line-break><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">turn_shelly_on</span>(<span class="hljs-params">ip_address</span>):</span><restore-line-break>    url = <span class="hljs-string">f'http://<span class="hljs-subst">{ip_address}</span>/relay/0/on'</span><restore-line-break>    <span class="hljs-keyword">try</span>:<restore-line-break>        response = requests.get(url)<restore-line-break>        <span class="hljs-keyword">return</span> response.status_code == <span class="hljs-number">200</span><restore-line-break>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<restore-line-break>        print(<span class="hljs-string">f"An error occurred: <span class="hljs-subst">{e}</span>"</span>)<restore-line-break>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><restore-line-break><restore-line-break><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">turn_shelly_off</span>(<span class="hljs-params">ip_address</span>):</span><restore-line-break>    url = <span class="hljs-string">f'http://<span class="hljs-subst">{ip_address}</span>/relay/0/off'</span><restore-line-break>    <span class="hljs-keyword">try</span>:<restore-line-break>        response = requests.get(url)<restore-line-break>        <span class="hljs-keyword">return</span> response.status_code == <span class="hljs-number">200</span><restore-line-break>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<restore-line-break>        print(<span class="hljs-string">f"An error occurred: <span class="hljs-subst">{e}</span>"</span>)<restore-line-break>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><restore-line-break><restore-line-break><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_shelly_led</span>(<span class="hljs-params">ip_address, led_status, led_color=None</span>):</span><restore-line-break>    url = <span class="hljs-string">f'http://<span class="hljs-subst">{ip_address}</span>/settings/led/0'</span><restore-line-break>    payload = {<restore-line-break>        <span class="hljs-string">'ison'</span>: <span class="hljs-string">'true'</span> <span class="hljs-keyword">if</span> led_status <span class="hljs-keyword">else</span> <span class="hljs-string">'false'</span><restore-line-break>    }<restore-line-break>    <span class="hljs-keyword">if</span> led_color:<restore-line-break>        payload[<span class="hljs-string">'red'</span>] = led_color.get(<span class="hljs-string">'red'</span>, <span class="hljs-number">0</span>)<restore-line-break>        payload[<span class="hljs-string">'green'</span>] = led_color.get(<span class="hljs-string">'green'</span>, <span class="hljs-number">0</span>)<restore-line-break>        payload[<span class="hljs-string">'blue'</span>] = led_color.get(<span class="hljs-string">'blue'</span>, <span class="hljs-number">0</span>)<restore-line-break>    <span class="hljs-keyword">try</span>:<restore-line-break>        response = requests.post(url, json=payload)<restore-line-break>        <span class="hljs-keyword">return</span> response.status_code == <span class="hljs-number">200</span><restore-line-break>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<restore-line-break>        print(<span class="hljs-string">f"An error occurred: <span class="hljs-subst">{e}</span>"</span>)<restore-line-break>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><restore-line-break><restore-line-break><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">blink_shelly_led</span>(<span class="hljs-params">ip_address, led_color, times=<span class="hljs-number">5</span>, interval=<span class="hljs-number">1</span></span>):</span><restore-line-break>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(times):<restore-line-break>        set_shelly_led(ip_address, <span class="hljs-literal">True</span>, led_color)<restore-line-break>        time.sleep(interval)<restore-line-break>        set_shelly_led(ip_address, <span class="hljs-literal">False</span>)<restore-line-break>        time.sleep(interval)<restore-line-break><restore-line-break><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:<restore-line-break>    shelly_ip = <span class="hljs-string">"192.168.x.x"</span>  <span class="hljs-comment"># Replace with your Shelly device's IP address</span><restore-line-break><restore-line-break>    <span class="hljs-comment"># Get Shelly status</span><restore-line-break>    status = get_shelly_status(shelly_ip)<restore-line-break>    <span class="hljs-keyword">if</span> status:<restore-line-break>        print(<span class="hljs-string">f"Shelly Status: <span class="hljs-subst">{status}</span>"</span>)<restore-line-break><restore-line-break>    <span class="hljs-comment"># Turn Shelly on</span><restore-line-break>    <span class="hljs-keyword">if</span> turn_shelly_on(shelly_ip):<restore-line-break>        print(<span class="hljs-string">"Successfully turned Shelly on"</span>)<restore-line-break><restore-line-break>    <span class="hljs-comment"># Turn Shelly off</span><restore-line-break>    <span class="hljs-keyword">if</span> turn_shelly_off(shelly_ip):<restore-line-break>        print(<span class="hljs-string">"Successfully turned Shelly off"</span>)<restore-line-break><restore-line-break><span class="hljs-comment"># Set LED color to red</span><restore-line-break>    <span class="hljs-keyword">if</span> set_shelly_led(shelly_ip, <span class="hljs-literal">True</span>, {<span class="hljs-string">'red'</span>: <span class="hljs-number">255</span>, <span class="hljs-string">'green'</span>: <span class="hljs-number">0</span>, <span class="hljs-string">'blue'</span>: <span class="hljs-number">0</span>}):<restore-line-break>        print(<span class="hljs-string">"Successfully set LED to red."</span>)<restore-line-break><restore-line-break>    <span class="hljs-comment"># Blink LED in blue color</span><restore-line-break>    blink_shelly_led(shelly_ip, {<span class="hljs-string">'red'</span>: <span class="hljs-number">0</span>, <span class="hljs-string">'green'</span>: <span class="hljs-number">0</span>, <span class="hljs-string">'blue'</span>: <span class="hljs-number">255</span>}, times=<span class="hljs-number">5</span>, interval=<span class="hljs-number">1</span>)<restore-line-break></code></pre>
<p>And that's it! You've successfully leveled up your home automation game. Have fun experimenting!</p>



            ]]>
        </content>
    </entry>
    <entry>
        <title>Building Python Projects The Right Way with Poetry and VS Code</title>
        <author>
            <name>Theo van der Sluijs</name>
        </author>
        <link href="https://itheo.tech/building-python-projects-the-right-way-with-poetry-and-vs-code.html"/>
        <id>https://itheo.tech/building-python-projects-the-right-way-with-poetry-and-vs-code.html</id>
        <media:content url="https://itheo.tech/media/posts/107/e7851480e8634da9e60e776cfcb7a250.jpeg" medium="image" />

        <updated>2023-10-16T03:00:12+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://itheo.tech/media/posts/107/e7851480e8634da9e60e776cfcb7a250.jpeg" alt="" />
                    Hey there, it's Theo! If you're anything like me—passionate about Python development, and always eager to dive into new tech stuff—you'll love what I've got to share today. A few months ago, I was stuck in a messy situation with a project that had grown&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://itheo.tech/media/posts/107/e7851480e8634da9e60e776cfcb7a250.jpeg" class="type:primaryImage" alt="" /></p>
                <p>Hey there, it's Theo! If you're anything like me—passionate about Python development, and always eager to dive into new tech stuff—you'll love what I've got to share today. A few months ago, I was stuck in a messy situation with a project that had grown wild and disorganized, like an untamed garden. It had sprawling dependencies, inconsistent environments, and let's not even talk about testing—it was a nightmare!</p>
<p>That's when I decided to revamp the way I structure my Python projects, and boy, has it been a game-changer! In today's blog, we'll deep dive into how to set up a Python project using Poetry for managing dependencies and performing tests in VS Code. Buckle up!</p>
<h2 id="heading-project-structure">Project Structure</h2>
<p>Let's start by organizing the files and folders. I mean, what's a good house without a strong foundation, right?</p>
<pre><code class="lang-plaintext">my_project/                     # Project root directory<restore-line-break>├── pyproject.toml              # Poetry configuration and dependencies<restore-line-break>├── README.md                   # Project description and setup guide<restore-line-break>├── .gitignore                  # Git ignore rules<restore-line-break>├── .vscode/                    # VS Code specific settings<restore-line-break>│   └── settings.json           # Editor settings<restore-line-break>├── src/                        # Your Python source code<restore-line-break>│   ├── __init__.py             # Makes src a Python package<restore-line-break>│   └── my_module/              # A Python module<restore-line-break>│       └── __init__.py         # Makes my_module a Python package<restore-line-break>└── tests/                      # Test suites<restore-line-break>    ├── __init__.py             # Makes tests a Python package<restore-line-break>    └── test_my_module/         # Tests for my_module<restore-line-break>        └── test_basic_functionality.py  # Actual test file<restore-line-break></code></pre>
<h3 id="heading-why-this-structure">Why this structure?</h3>
<ol>
<li>
<p><code>pyproject.toml</code>: The heart of your project when using Poetry. It keeps track of your project metadata and dependencies.</p>
<ul>
<li><strong>Inline Comment</strong>: Run <code>poetry init</code> to generate this file.</li>
</ul>
</li>
<li>
<p><a target="_blank" href="http://README.md" rel="noopener"><code>README.md</code></a>: The front page of your codebase. It's essential for explaining what your project is about and how to use it.</p>
<ul>
<li><strong>Inline Comment</strong>: Use Markdown for styling.</li>
</ul>
</li>
<li>
<p><code>.gitignore</code>: Keeps your repository clean by ignoring files like <code>.env</code>, <code>__pycache__</code>, etc.</p>
<ul>
<li><strong>Inline Comment</strong>: Check out templates online based on your project needs.</li>
</ul>
</li>
<li>
<p><code>.vscode/settings.json</code>: Customize your VS Code editor settings for this project.</p>
<ul>
<li><strong>Inline Comment</strong>: Add settings like test configurations or Python paths.</li>
</ul>
</li>
<li>
<p><code>src/</code> and <code>tests/</code>: The <code>src/</code> directory contains the source code, and <code>tests/</code> is for your test suites. Separating source and test code makes your project more maintainable.</p>
<ul>
<li><strong>Inline Comment</strong>: Always import your source code in your tests as you would in a third-party package.</li>
</ul>
</li>
</ol>
<hr />
<h2 id="heading-poetry-for-dependency-management">Poetry for Dependency Management</h2>
<p>Once you've got your structure set up, it's time for some Poetry magic.</p>
<ol>
<li>
<p><strong>Install Poetry</strong>: First, you'll need to install Poetry if you haven't yet.</p>
<pre><code class="lang-bash"> curl -sSL https://install.python-poetry.org | python3<restore-line-break></code></pre>
</li>
<li>
<p><strong>Initialize Your Project</strong>: Navigate to your project's root directory and run <code>poetry init</code>.</p>
<pre><code class="lang-bash"> poetry init<restore-line-break></code></pre>
<p> This command will guide you through creating your <code>pyproject.toml</code>.</p>
</li>
<li>
<p><strong>Adding Dependencies</strong>: To add a package, simply run:</p>
<pre><code class="lang-bash"> poetry add <package-name><restore-line-break></code></pre>
</li>
</ol>
<h3 id="heading-example-adding-flask">Example: Adding Flask</h3>
<pre><code class="lang-bash">poetry add flask<restore-line-break></code></pre>
<p>This will update your <code>pyproject.toml</code> file with Flask and its dependencies.</p>
<ol>
<li>
<p><strong>Installing Dependencies</strong>: Poetry automatically installs the added packages, but if you've cloned a project or need to re-install, just run:</p>
<pre><code class="lang-bash"> poetry install<restore-line-break></code></pre>
</li>
<li>
<p><strong>Virtual Environments</strong>: Poetry creates a virtual environment for your project, ensuring that dependencies are isolated.</p>
</li>
</ol>
<hr />
<h2 id="heading-vs-code-for-efficient-coding">VS Code for Efficient Coding</h2>
<h3 id="heading-setting-the-python-interpreter">Setting the Python Interpreter</h3>
<p>To tell VS Code to use Poetry’s virtual environment, you can either:</p>
<ol>
<li>
<p>Modify <code>.vscode/settings.json</code>:</p>
<pre><code class="lang-json"> {<restore-line-break>     <span class="hljs-attr">"python.pythonPath"</span>: <span class="hljs-string">"${workspaceFolder}/.venv/bin/python"</span><restore-line-break> }<restore-line-break></code></pre>
</li>
<li>
<p>Or use <code>Python: Select Interpreter</code> from the Command Palette and choose the virtual environment generated by Poetry.</p>
</li>
</ol>
<h3 id="heading-configure-testing">Configure Testing</h3>
<p>To run tests within VS Code, you'll need to specify the testing framework in <code>.vscode/settings.json</code>:</p>
<pre><code class="lang-json">{<restore-line-break>  <span class="hljs-attr">"python.testing.pytestEnabled"</span>: <span class="hljs-literal">true</span>,<restore-line-break>  <span class="hljs-attr">"python.testing.pytestArgs"</span>: [<span class="hljs-string">"tests"</span>]<restore-line-break>}<restore-line-break></code></pre>
<hr />
<h2 id="heading-putting-it-all-together">Putting it All Together</h2>
<p>By now, you should have a robust, manageable Python project that you can be proud of.</p>
<pre><code class="lang-bash">poetry install  <span class="hljs-comment"># Install the project and its dependencies</span><restore-line-break>poetry run pytest  <span class="hljs-comment"># Run tests using the Poetry environment</span><restore-line-break></code></pre>
<hr />
<h2 id="heading-readme-the-first-impression">README: The First Impression</h2>
<p>A <a target="_blank" href="http://README.md" rel="noopener"><code>README.md</code></a> isn’t just a file; it’s the first impression people get of your project. So make it count!</p>
<pre><code class="lang-markdown"><span class="hljs-section"># My Awesome Project</span><restore-line-break><restore-line-break><span class="hljs-section">## Description</span><restore-line-break>This project does amazing things with Python.<restore-line-break><restore-line-break><span class="hljs-section">## Setup</span><restore-line-break>Run <span class="hljs-code">`poetry install`</span> to install dependencies.<restore-line-break><restore-line-break><span class="hljs-section">## Testing</span><restore-line-break>Run <span class="hljs-code">`poetry run pytest`</span> to execute tests.<restore-line-break></code></pre>
<hr />
<h2 id="heading-conclusion">Conclusion</h2>
<p>Phew! We've covered quite a lot, haven't we? From setting up a clean project structure to managing dependencies with Poetry, and making the whole thing sing together in VS Code. Now, you're not just writing code; you're crafting an art piece.</p>
<p>Until next time, happy coding!</p>
<hr />

            ]]>
        </content>
    </entry>
    <entry>
        <title>Creating a Dynamic Product Screen in WordPress WooCommerce</title>
        <author>
            <name>Theo van der Sluijs</name>
        </author>
        <link href="https://itheo.tech/creating-a-dynamic-product-screen-in-wordpress-woocommerce.html"/>
        <id>https://itheo.tech/creating-a-dynamic-product-screen-in-wordpress-woocommerce.html</id>
        <media:content url="https://itheo.tech/media/posts/108/557dfc5f8faab484a12dde704f8a8421.jpeg" medium="image" />

        <updated>2023-10-15T09:32:09+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://itheo.tech/media/posts/108/557dfc5f8faab484a12dde704f8a8421.jpeg" alt="" />
                    Hello there! As you might know I'm a bit of a Python Developer and you might wonder, what's a Python guy doing in the WordPress world? Well, that's the magic of being in tech—you're never confined to one box! So, why did I delve into&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://itheo.tech/media/posts/108/557dfc5f8faab484a12dde704f8a8421.jpeg" class="type:primaryImage" alt="" /></p>
                <p>Hello there! As you might know I'm a bit of a Python Developer and you might wonder, what's a Python guy doing in the WordPress world? Well, that's the magic of being in tech—you're never confined to one box!</p>
<p>So, why did I delve into WordPress and WooCommerce? Simple: I wanted to create a solution that could provide transparency and accountability within the WooCommerce ecosystem. Knowing who did what and when can be vital for many online businesses. Plus, I wanted to offer a simple way to implement this, and what better way than through the snippets plugin for WordPress?</p>
<p>Let's dive into the specifics, shall we?</p>
<h2 id="heading-what-you-will-need">What You Will Need:</h2>
<ul>
<li>
<p>A WordPress WooCommerce site</p>
</li>
<li>
<p><a target="_blank" href="https://wordpress.org/plugins/code-snippets/" rel="noopener">Snippets plugin installed</a></p>
</li>
</ul>
<hr />
<h2 id="heading-what-does-the-code-do">What Does the Code Do?</h2>
<p>This script will add a section to your product edit screen in WooCommerce. The section will include two things:</p>
<ol>
<li>
<p>When the product was created and by who.</p>
</li>
<li>
<p>A list that displays the date, time, and username of anyone who edited the product.</p>
</li>
</ol>
<hr />
<h2 id="heading-the-code-whats-happening-under-the-hood">The Code: What's Happening Under the Hood?</h2>
<p>Before getting into the code, let's break it down, bit by bit.</p>
<h3 id="heading-adding-the-product-screen-element">Adding the Product Screen Element</h3>
<p>To add an element to the product screen, we'll hook into the WooCommerce API and define a function that adds our custom section.</p>
<pre><code class="lang-php"><span class="hljs-comment">// Hook to add the product data tab</span><restore-line-break>add_filter( <span class="hljs-string">'woocommerce_product_data_tabs'</span>, <span class="hljs-string">'add_custom_product_data_tab'</span> , <span class="hljs-number">99</span> , <span class="hljs-number">1</span> );<restore-line-break></code></pre>
<p>Here, we use the <code>add_filter</code> function to add our custom tab using the <code>woocommerce_product_data_tabs</code> hook.</p>
<hr />
<h3 id="heading-displaying-product-creation-info">Displaying Product Creation Info</h3>
<p>We'll need to fetch details about the product creation date and the user who created it.</p>
<pre><code class="lang-php"><span class="hljs-comment">// Get Product created details</span><restore-line-break>$product_id = $post->ID;<restore-line-break>$product = wc_get_product($product_id);<restore-line-break>$product_created = $product->get_date_created();<restore-line-break>$author_id = get_post_field (<span class="hljs-string">'post_author'</span>, $product_id);<restore-line-break></code></pre>
<p>Here, we fetch the product ID, and use WooCommerce functions to get the date it was created (<code>$product_created</code>). We also use WordPress functions to get the ID of the author (<code>$author_id</code>).</p>
<hr />
<h3 id="heading-displaying-product-edit-history">Displaying Product Edit History</h3>
<p>To track edits, we'll hook into WordPress's <code>save_post</code> action.</p>
<pre><code class="lang-php"><span class="hljs-comment">// Hook when the product is saved to save edit history</span><restore-line-break>add_action( <span class="hljs-string">'save_post'</span>, <span class="hljs-string">'save_product_edit_history'</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span> );<restore-line-break></code></pre>
<p>Here, we use the <code>add_action</code> function to call our custom function <code>save_product_edit_history</code> every time a product is saved. This allows us to keep track of edits.</p>
<hr />
<h2 id="heading-how-to-add-this-to-wordpress-using-snippets-plugin">How to Add This to WordPress Using Snippets Plugin</h2>
<ol>
<li>
<p>Open your WordPress dashboard and navigate to the Snippets plugin.</p>
</li>
<li>
<p>Create a new snippet and copy-paste the entire code into it.</p>
</li>
<li>
<p>Save and activate the snippet.</p>
</li>
</ol>
<hr />
<h2 id="heading-the-complete-code">The Complete Code</h2>
<pre><code class="lang-php"><span class="hljs-comment">// Hook to add the product data tab</span><restore-line-break>add_filter( <span class="hljs-string">'woocommerce_product_data_tabs'</span>, <span class="hljs-string">'add_custom_product_data_tab'</span> , <span class="hljs-number">99</span> , <span class="hljs-number">1</span> );<restore-line-break><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add_custom_product_data_tab</span>(<span class="hljs-params"> $tabs </span>) </span>{<restore-line-break>    $tabs[<span class="hljs-string">'custom_tab'</span>] = <span class="hljs-keyword">array</span>(<restore-line-break>        <span class="hljs-string">'label'</span> => __( <span class="hljs-string">'Product History'</span>, <span class="hljs-string">'my_text_domain'</span> ),<restore-line-break>        <span class="hljs-string">'target'</span> => <span class="hljs-string">'custom_product_data'</span>,<restore-line-break>    );<restore-line-break>    <span class="hljs-keyword">return</span> $tabs;<restore-line-break>}<restore-line-break><restore-line-break><span class="hljs-comment">// Show product created details and history of edits</span><restore-line-break>add_action(<span class="hljs-string">'woocommerce_product_data_panels'</span>, <span class="hljs-string">'custom_product_data_fields'</span>);<restore-line-break><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_product_data_fields</span>(<span class="hljs-params"></span>) </span>{<restore-line-break>    <span class="hljs-keyword">global</span> $post;<restore-line-break><restore-line-break>    <span class="hljs-comment">// Get Product created details</span><restore-line-break>    $product_id = $post->ID;<restore-line-break>    $product = wc_get_product($product_id);<restore-line-break>    $product_created = $product->get_date_created();<restore-line-break>    $author_id = get_post_field (<span class="hljs-string">'post_author'</span>, $product_id);<restore-line-break>    $author = get_the_author_meta( <span class="hljs-string">'display_name'</span>, $author_id );<restore-line-break><restore-line-break>    <span class="hljs-keyword">echo</span> <span class="hljs-string">'
<div id="custom_product_data" class="panel woocommerce_options_panel hidden">'</span>;<restore-line-break>    <span class="hljs-keyword">echo</span> <span class="hljs-string">'<strong>Created On:</strong> '</span> . $product_created;<restore-line-break>    <span class="hljs-keyword">echo</span> <span class="hljs-string">'<br>'</span>;<restore-line-break>    <span class="hljs-keyword">echo</span> <span class="hljs-string">'<strong>Created By:</strong> '</span> . $author;<restore-line-break>    <span class="hljs-keyword">echo</span> <span class="hljs-string">'<br>'</span>;<restore-line-break><restore-line-break>    <span class="hljs-comment">// Show edit history</span><restore-line-break>    $edit_history = get_post_meta($product_id, <span class="hljs-string">'_edit_history'</span>, <span class="hljs-literal">true</span>);<restore-line-break>    <span class="hljs-keyword">if</span> ($edit_history) {<restore-line-break>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'<strong>Edit History:</strong>'</span>;<restore-line-break>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'
<ul>'</span>;<restore-line-break>        <span class="hljs-keyword">foreach</span> ($edit_history <span class="hljs-keyword">as</span> $edit) {<restore-line-break>            <span class="hljs-keyword">echo</span> <span class="hljs-string">'
<li>'</span> . $edit[<span class="hljs-string">'time'</span>] . <span class="hljs-string">' by '</span> . $edit[<span class="hljs-string">'username'</span>] . <span class="hljs-string">'</li>
<p>'</span>;<restore-line-break>        }<restore-line-break>        <span class="hljs-keyword">echo</span> <span class="hljs-string">'</ul>
<p>'</span>;<restore-line-break>    }<restore-line-break>    <span class="hljs-keyword">echo</span> <span class="hljs-string">'</div>
<p>'</span>;<restore-line-break>}<restore-line-break><restore-line-break><span class="hljs-comment">// Hook when the product is saved to save edit history</span><restore-line-break>add_action( <span class="hljs-string">'save_post'</span>, <span class="hljs-string">'save_product_edit_history'</span>, <span class="hljs-number">10</span>, <span class="hljs-number">3</span> );<restore-line-break><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save_product_edit_history</span>(<span class="hljs-params"> $post_id, $post, $update </span>) </span>{<restore-line-break>    <span class="hljs-keyword">if</span> ($post->post_type == <span class="hljs-string">'product'</span>) {<restore-line-break>        $current_user = wp_get_current_user();<restore-line-break>        $edit_history = get_post_meta($post_id, <span class="hljs-string">'_edit_history'</span>, <span class="hljs-literal">true</span>);<restore-line-break>        <span class="hljs-keyword">if</span> (!$edit_history) $edit_history = <span class="hljs-keyword">array</span>();<restore-line-break>        $edit_history[] = <span class="hljs-keyword">array</span>(<span class="hljs-string">'time'</span> => current_time(<span class="hljs-string">'mysql'</span>), <span class="hljs-string">'username'</span> => $current_user->user_login);<restore-line-break>        update_post_meta($post_id, <span class="hljs-string">'_edit_history'</span>, $edit_history);<restore-line-break>    }<restore-line-break>}<restore-line-break></code></pre>
<hr />
<p>And there you have it! A complete guide to adding a dynamic product screen to your WordPress WooCommerce site. Give it a try and see how it adds another layer of transparency to your online business. Cheers!  </p>



            ]]>
        </content>
    </entry>
    <entry>
        <title>Count your drive to work-days with Volvo Drive Log</title>
        <author>
            <name>Theo van der Sluijs</name>
        </author>
        <link href="https://itheo.tech/count-your-drive-to-work-days-with-volvo-drive-log.html"/>
        <id>https://itheo.tech/count-your-drive-to-work-days-with-volvo-drive-log.html</id>
        <media:content url="https://itheo.tech/media/posts/81/77fcbb262160719fe3b29b16070ff520.jpeg" medium="image" />

        <updated>2023-10-03T17:55:08+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://itheo.tech/media/posts/81/77fcbb262160719fe3b29b16070ff520.jpeg" alt="" />
                    Every month comes with its routines, and if you're anything like me, you probably have a love-hate relationship with them. For me, one of those tasks was to manually count the number of days I drove to work and the number of days I worked&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://itheo.tech/media/posts/81/77fcbb262160719fe3b29b16070ff520.jpeg" class="type:primaryImage" alt="" /></p>
                <p>Every month comes with its routines, and if you're anything like me, you probably have a love-hate relationship with them. For me, one of those tasks was to manually count the number of days I drove to work and the number of days I worked from home. But you know what? I thought to myself: Why not spend time automating this? After all, I own a Volvo V60 that's capable of giving me an excellent log of my trips. So, I decided to write a Python script that does the heavy lifting for me, and now I can focus on the fun stuff—like figuring out how to get my Volvo's API to directly sync with the script.</p>
<h2 id="heading-why-i-needed-to-automate-this">Why I Needed to Automate This</h2>
<p>You might be wondering why this is such a big deal. I mean, it's just a matter of counting days, right? Well, the problem is not the complexity but the repetition of the task. Doing the same manual counting task 12 times a year feels a bit too much like Groundhog Day. Plus, we are living in the 21st century—automation is the name of the game. So, I dived into the Volvo Drive Log and my Python IDE and got to work.</p>
<h2 id="heading-the-script-python-to-the-rescue">The Script: Python to the Rescue</h2>
<p>Before we delve into the details, let me say that Python was an obvious choice for this project. Given its simplicity and a rich ecosystem of libraries, I could easily read Excel files, manipulate data, and even count business days in a given month.</p>
<p>Here's how the script works:</p>
<h3 id="heading-importing-libraries">Importing Libraries</h3>
<pre><code class="lang-python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<restore-line-break><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<restore-line-break><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<restore-line-break><span class="hljs-keyword">from</span> dateutil <span class="hljs-keyword">import</span> relativedelta<restore-line-break></code></pre>
<p>In this section, I imported the required libraries. <code>pandas</code> is used for data manipulation, <code>numpy</code> for numerical operations, and <code>datetime</code> for date-time manipulations.</p>
<h3 id="heading-function-finddatesfromeindpunt">Function: <code>find_dates_from_eindpunt</code></h3>
<p>This is the heart of the script, where most of the logic resides.</p>
<pre><code class="lang-python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_dates_from_eindpunt</span>(<span class="hljs-params">excel_path, eindpunt_value=<span class="hljs-string">"Oude Veerseweg"</span>, eindpunt_col=<span class="hljs-string">"Eindpunt"</span>, datetime_col=<span class="hljs-string">"Begonnen"</span></span>):</span><restore-line-break></code></pre>
<p>Here, I defined the function that takes several parameters:</p>
<ul>
<li>
<p><code>excel_path</code>: The path to the Excel file containing the log.</p>
</li>
<li>
<p><code>eindpunt_value</code>: The value to search for in the 'Eindpunt' column.</p>
</li>
<li>
<p><code>eindpunt_col</code>: The name of the column where we'll search for <code>eindpunt_value</code>.</p>
</li>
<li>
<p><code>datetime_col</code>: The name of the column containing the date-time strings.</p>
</li>
</ul>
<h4 id="heading-reading-the-excel-file">Reading the Excel File</h4>
<pre><code class="lang-python">df = pd.read_excel(excel_path)<restore-line-break></code></pre>
<p>With <code>pandas</code>, reading an Excel file is as simple as this one-liner.</p>
<h4 id="heading-filtering-rows">Filtering Rows</h4>
<pre><code class="lang-python">filtered_df = df[df[eindpunt_col].str.contains(eindpunt_value, case=<span class="hljs-literal">False</span>, na=<span class="hljs-literal">False</span>)]<restore-line-break></code></pre>
<p>Here, we filter the rows where the 'Eindpunt' column contains the word "Oude Veerseweg."</p>
<h4 id="heading-checking-for-multiple-months">Checking for Multiple Months</h4>
<pre><code class="lang-python">months_set = set(str(date).split(<span class="hljs-string">"-"</span>)[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> date <span class="hljs-keyword">in</span> dates_set)<restore-line-break></code></pre>
<p>This part checks if the data contains entries from multiple months and prints a warning if it does.</p>
<h3 id="heading-the-main-program">The Main Program</h3>
<p>In the <code>main</code> section of the code, we take user input for the <code>eindpunt_value</code> and the number of days off. Then, we call the <code>find_dates_from_eindpunt</code> function and print out the results.</p>
<h2 id="heading-using-the-script">Using the Script</h2>
<p>Using the script is easy-peasy! Place your Excel file in the right directory, run the script, and answer the prompts. Voila! You'll have your count of days you drove to work, days you worked from home, and even days you took off.</p>
<h2 id="heading-future-plans">Future Plans</h2>
<p>The next big thing on my agenda is to integrate this script with the Volvo API, so I won't even have to download the Excel file manually. A fully automated system is the dream, after all.</p>
<h2 id="heading-heres-the-entire-script-for-your-reference">Here's the Entire Script for Your Reference</h2>
<pre><code class="lang-python"><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<restore-line-break><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<restore-line-break><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<restore-line-break><span class="hljs-keyword">from</span> dateutil <span class="hljs-keyword">import</span> relativedelta<restore-line-break><restore-line-break><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_dates_from_eindpunt</span>(<span class="hljs-params">excel_path, eindpunt_value=<span class="hljs-string">"Oude Veerseweg"</span>, eindpunt_col=<span class="hljs-string">"Eindpunt"</span>, datetime_col=<span class="hljs-string">"Begonnen"</span></span>):</span><restore-line-break>    df = pd.read_excel(excel_path)<restore-line-break>    filtered_df = df[df[eindpunt_col].str.contains(eindpunt_value, case=<span class="hljs-literal">False</span>, na=<span class="hljs-literal">False</span>)]<restore-line-break>    dates_set = set(str(date).split(<span class="hljs-string">" "</span>)[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> date <span class="hljs-keyword">in</span> filtered_df[datetime_col].to_list())<restore-line-break>    months_set = set(str(date).split(<span class="hljs-string">"-"</span>)[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> date <span class="hljs-keyword">in</span> dates_set)<restore-line-break>    <span class="hljs-keyword">if</span> len(months_set) > <span class="hljs-number">1</span>:<restore-line-break>        print(<span class="hljs-string">"Warning: More than one month found in the data. Please be cautious."</span>)<restore-line-break>    sorted_dates = sorted(dates_set)<restore-line-break>    business_days_count = <span class="hljs-number">0</span><restore-line-break>    <span class="hljs-keyword">if</span> sorted_dates:<restore-line-break>        first_date = datetime.strptime(sorted_dates[<span class="hljs-number">0</span>], <span class="hljs-string">'%Y-%m-%d'</span>)<restore-line-break>        last_date = datetime.strptime(sorted_dates[<span class="hljs-number">-1</span>], <span class="hljs-string">'%Y-%m-%d'</span>)<restore-line-break>        month_name = first_date.strftime(<span class="hljs-string">"%B"</span>)<restore-line-break>        business_days_count = np.busday_count(sorted_dates[<span class="hljs-number">0</span>], sorted_dates[<span class="hljs-number">-1</span>]) + <span class="hljs-number">1</span><restore-line-break>        adjusted_count = business_days_count - len(sorted_dates)<restore-line-break>        <span class="hljs-keyword">return</span> sorted_dates, adjusted_count, business_days_count, month_name<restore-line-break>    <span class="hljs-keyword">else</span>:<restore-line-break>        <span class="hljs-keyword">return</span> [], <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-string">""</span><restore-line-break><restore-line-break><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:<restore-line-break>    excel_path = <span class="hljs-string">"data/volvo-journal-log.xlsx"</span><restore-line-break>    eindpunt_value = input(<span class="hljs-string">"Enter the value to search for in the 'Eindpunt' column (default is 'Oude Veerseweg'): "</span>)<restore-line-break>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> eindpunt_value:<restore-line-break>        eindpunt_value = <span class="hljs-string">"Oude Veerseweg"</span><restore-line-break>    days_off_input = input(<span class="hljs-string">"Enter the number of days off you had (default is 0): "</span>)<restore-line-break>    days_off = int(days_off_input) <span class="hljs-keyword">if</span> days_off_input <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><restore-line-break>    dates, adjusted_count, business_days_count, month_name = find_dates_from_eindpunt(excel_path, eindpunt_value=eindpunt_value)<restore-line-break>    adjusted_count -= days_off<restore-line-break>    <span class="hljs-keyword">for</span> date <span class="hljs-keyword">in</span> dates:<restore-line-break>        print(date)<restore-line-break>    print(<span class="hljs-string">f"Total days you drove to work in <span class="hljs-subst">{month_name}</span>: <span class="hljs-subst">{len(dates)}</span>"</span>)<restore-line-break>    print(<span class="hljs-string">f"Actual number of working days in <span class="hljs-subst">{month_name}</span>: <span class="hljs-subst">{business_days_count}</span>"</span>)<restore-line-break>    print(<span class="hljs-string">f"Total number of days you worked from home: <span class="hljs-subst">{adjusted_count}</span>"</span>)<restore-line-break>    print(<span class="hljs-string">f"Total number of days off: <span class="hljs-subst">{days_off}</span>"</span>)<restore-line-break>    print(<span class="hljs-string">"If you had any additional off days during this period please subtract them yourself."</span>)<restore-line-break></code></pre>



            ]]>
        </content>
    </entry>
    <entry>
        <title>Upgrading to Python 3.12 on Your Raspberry Pi</title>
        <author>
            <name>Theo van der Sluijs</name>
        </author>
        <link href="https://itheo.tech/upgrading-to-python-312-on-your-raspberry-pi.html"/>
        <id>https://itheo.tech/upgrading-to-python-312-on-your-raspberry-pi.html</id>
        <media:content url="https://itheo.tech/media/posts/82/6490a141ce0a92652b7b0f21960425a1.jpeg" medium="image" />

        <updated>2023-09-30T22:00:00+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://itheo.tech/media/posts/82/6490a141ce0a92652b7b0f21960425a1.jpeg" alt="" />
                    Why Python 3.12, and Why on Raspberry Pi? Hey there, it's iTheo! Look, if you're anything like me—a Python developer who lives for home automation, energy solutions, and climate sustainability—then you'll understand why I find Python 3.12 an absolute game-changer. I've been tinkering with Python&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://itheo.tech/media/posts/82/6490a141ce0a92652b7b0f21960425a1.jpeg" class="type:primaryImage" alt="" /></p>
                <h2 id="heading-why-python-312-and-why-on-raspberry-pi">Why Python 3.12, and Why on Raspberry Pi?</h2>
<p>Hey there, it's iTheo! Look, if you're anything like me—a Python developer who lives for home automation, energy solutions, and climate sustainability—then you'll understand why I find Python 3.12 an absolute game-changer. I've been tinkering with Python on my Raspberry Pi for a while, mainly for my smart home projects. The thing about Raspberry Pi is that it's not just a tiny computer; it's a sandbox for your imagination! And when fueled by Python 3.12? Oh boy, you're in for a ride.</p>
<h2 id="heading-the-journey-to-python-312">The Journey to Python 3.12</h2>
<p>I've been waiting eagerly for Python 3.12 for quite a while. The day it was released, you bet I was one of the first to download it. Why? Because the improvements were right up my alley—enhanced f-string parsing, improved error messages, support for isolated subinterpreters (just imagine the parallel processing possibilities for home automation), and the list goes on!</p>
<p>So how did I go about installing it? Let's dig in!</p>
<h2 id="heading-step-by-step-guide-to-installing-python-312">Step-by-Step Guide to Installing Python 3.12</h2>
<h3 id="heading-prerequisites">Prerequisites</h3>
<p>First, ensure your Raspberry Pi OS is up-to-date:</p>
<pre><code class="lang-bash">sudo apt update && sudo apt upgrade -y<restore-line-break></code></pre>
<h3 id="heading-download-python-312-source">Download Python 3.12 Source</h3>
<p>Navigate to Python's official website and grab the Python 3.12 source code.</p>
<pre><code class="lang-bash">wget https://www.python.org/ftp/python/3.12.0/Python-3.12.0.tgz<restore-line-break></code></pre>
<h3 id="heading-extract-and-navigate-to-directory">Extract and Navigate to Directory</h3>
<pre><code class="lang-bash">tar -xf Python-3.12.0.tgz<restore-line-break><span class="hljs-built_in">cd</span> Python-3.12.0<restore-line-break></code></pre>
<h3 id="heading-configure-and-compile">Configure and Compile</h3>
<p>Run the following commands to configure and compile Python 3.12.</p>
<pre><code class="lang-bash">./configure --enable-optimizations<restore-line-break>make -j 4<restore-line-break>sudo make altinstall<restore-line-break></code></pre>
<p>And voila! Python 3.12 should now be installed.</p>
<p>If you want you can also use my automated script, but be aware it will set python 3.12 to you default python version. And that is not always a good thing.</p>
<p>Wanna try anyway?</p>
<pre><code class="lang-plaintext">wget -qO - https://raw.githubusercontent.com/tvdsluijs/sh-python-installer/main/python.sh | sudo bash -s 3.12<restore-line-break></code></pre>
<h2 id="heading-whats-new-in-python-312">What's New in Python 3.12?</h2>
<h3 id="heading-new-features">New Features</h3>
<ol>
<li>
<p><strong>More Flexible f-string Parsing (PEP 701)</strong><br> Imagine creating complex formatted strings with ease. This is perfect for logging sensor data in my home automation tasks.</p>
</li>
<li>
<p><strong>Support for Buffer Protocol in Python Code (PEP 688)</strong><br> I was ecstatic about this. Now manipulating binary data is a cinch.</p>
</li>
<li>
<p><strong>New Debugging/Profiling API (PEP 669)</strong><br> Debugging just got a whole lot easier. As an Agile Coach and Product Owner, streamlined debugging means faster deployment cycles.</p>
</li>
<li>
<p><strong>Isolated Subinterpreters with Separate GILs (PEP 684)</strong><br> This was a game-changer for my energy and home automation projects. Multiple tasks in parallel? Yes, please!</p>
</li>
<li>
<p><strong>Improved Error Messages</strong><br> For someone who codes in Python daily, the enhanced error messages are a huge time-saver.</p>
</li>
<li>
<p><strong>Support for Linux perf Profiler</strong><br> Now you can see Python function names directly in Linux perf traces.</p>
</li>
<li>
<p><strong>Performance Improvements</strong><br> With estimated 5% overall performance improvement, my Raspberry Pi feels snappier.</p>
</li>
</ol>
<h3 id="heading-type-annotations">Type Annotations</h3>
<ol>
<li>
<p><strong>New Type Annotation Syntax for Generic Classes (PEP 695)</strong><br> It simplifies the way you define generic classes, making your code more readable.</p>
</li>
<li>
<p><strong>Override Decorator for Methods (PEP 698)</strong><br> This ensures that the method actually overrides a method in the base class, preventing subtle bugs.</p>
</li>
</ol>
<h3 id="heading-deprecations">Deprecations</h3>
<ul>
<li>
<p>Deprecated methods in the <code>unittest</code> module and old modules like <code>smtpd</code> and <code>distutils</code> have been removed.</p>
</li>
<li>
<p>SyntaxWarnings now for invalid backslash escape sequences in strings.</p>
</li>
<li>
<p>Plus, a bunch of other deprecated and broken functions were thrown out.</p>
</li>
</ul>
<h2 id="heading-concluding-thoughts">Concluding Thoughts</h2>
<p>So, why did I rush to install Python 3.12 on my Raspberry Pi? The features align perfectly with my professional and hobbyist pursuits. As a Python Developer and Chief Sustainability Officer, I am always looking for ways to optimize energy use, streamline code, and innovate in the realm of sustainability. Python 3.12, with its features like isolated subinterpreters, new debugging API, and more, makes that journey exciting and impactful.</p>
<p>Upgrading to Python 3.12 has opened up a world of opportunities for me. So if you're like me, looking to push the boundaries of what's possible with Python and Raspberry Pi, make the upgrade. Trust me, you won't regret it!</p>
<p>Cheers,<br>Theo</p>



            ]]>
        </content>
    </entry>
    <entry>
        <title>How to Switch Between Python Versions</title>
        <author>
            <name>Theo van der Sluijs</name>
        </author>
        <link href="https://itheo.tech/how-to-switch-between-python-versions.html"/>
        <id>https://itheo.tech/how-to-switch-between-python-versions.html</id>
        <media:content url="https://itheo.tech/media/posts/83/f4434d59c2dc9b387c8b46941ea0bf76.jpeg" medium="image" />

        <updated>2023-09-26T19:30:03+02:00</updated>
            <summary>
                <![CDATA[
                        <img src="https://itheo.tech/media/posts/83/f4434d59c2dc9b387c8b46941ea0bf76.jpeg" alt="" />
                    To revert to an older Python version and set it as the default, you can use update-alternatives on Debian-based systems or manipulate symbolic links. Here's how: If you've set up multiple Python versions using update-alternatives, you can switch between them by running: sudo update-alternatives --config&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                    <p><img src="https://itheo.tech/media/posts/83/f4434d59c2dc9b387c8b46941ea0bf76.jpeg" class="type:primaryImage" alt="" /></p>
                <p>To revert to an older Python version and set it as the default, you can use <code>update-alternatives</code> on Debian-based systems or manipulate symbolic links. Here's how:</p>
<h3 id="heading-using-update-alternatives-debian-based-like-ubuntu">Using <code>update-alternatives</code> (Debian-based like Ubuntu)</h3>
<p>If you've set up multiple Python versions using <code>update-alternatives</code>, you can switch between them by running:</p>
<pre><code class="lang-bash">sudo update-alternatives --config python3<restore-line-break></code></pre>
<p>You'll get a menu to choose the Python version. Select the one you want.</p>
<h3 id="heading-using-symbolic-links-generic">Using Symbolic Links (Generic)</h3>
<p>If you've manually changed the symbolic link for Python, you can revert it like this:</p>
<ol>
<li>
<p>Remove the existing link:</p>
<pre><code class="lang-bash"> sudo rm /usr/bin/python3<restore-line-break></code></pre>
</li>
<li>
<p>Create a new link pointing to the original Python executable:</p>
<pre><code class="lang-bash"> sudo ln -s /usr/bin/python3.x /usr/bin/python3<restore-line-break></code></pre>
</li>
</ol>
<p>Replace <code>python3.x</code> with the original version you want, like <code>python3.8</code>.</p>
<h3 id="heading-bash-script-example">Bash Script Example</h3>
<p>If you want to automate it, you could write a Bash script:</p>
<pre><code class="lang-bash"><span class="hljs-meta">#!/bin/bash</span><restore-line-break><restore-line-break><span class="hljs-comment"># Using update-alternatives</span><restore-line-break>sudo update-alternatives --config python3<restore-line-break><restore-line-break><span class="hljs-comment"># OR using symbolic links</span><restore-line-break><span class="hljs-comment"># sudo rm /usr/bin/python3</span><restore-line-break><span class="hljs-comment"># sudo ln -s /usr/bin/python3.x /usr/bin/python3</span><restore-line-break><restore-line-break><span class="hljs-built_in">echo</span> <span class="hljs-string">"Python version switched."</span><restore-line-break></code></pre>
<p>Remember to give execute permissions to the script:</p>
<pre><code class="lang-bash">chmod +x switch_python_version.sh<restore-line-break></code></pre>
<p>Then run it:</p>
<pre><code class="lang-bash">./switch_python_version.sh<restore-line-break></code></pre>
<p>That should set your Python version back to the original one.</p>



            ]]>
        </content>
    </entry>
</feed>
